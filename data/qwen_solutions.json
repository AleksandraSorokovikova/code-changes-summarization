{
    "Write a function to find the longest chain which can be formed from the given set of pairs.": [
        "def longest_chain(pairs):\n    pairs.sort(key=lambda x: x[0])\n    n = len(pairs)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if pairs[i][0] > pairs[j][1] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    \n    return max(dp)"
    ],
    "Write a python function to find the first repeated character in a given string.": [
        "def first_repeated_character(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    ],
    "Write a function to get a lucid number smaller than or equal to n.": [
        "def largest_lucid_number(n):\n    def is_lucid(num):\n        return len(str(num)) == len(set(str(num)))\n    \n    while n > 0:\n        if is_lucid(n):\n            return n\n        n -= 1\n    return -1"
    ],
    "Write a function to reverse words in a given string.": [
        "def reverse_words(s):\n    return ' '.join(s.split()[::-1])"
    ],
    "Write a function to check if the given integer is a prime number.": [
        "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    ],
    "Write a function to convert degrees to radians.": [
        "import math\n\ndef degrees_to_radians(degrees):\n    return degrees * (math.pi / 180)"
    ],
    "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.": [
        "import re\n\ndef search_literals_in_string(pattern, text):\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    return matches\n\n# Example usage:\npattern = \"example\"\ntext = \"This is an example text with another example.\"\nprint(search_literals_in_string(pattern, text))"
    ],
    "Write a python function to find nth bell number.": [
        "def bell_number(n):\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    ],
    "Write a python function to find minimum possible value for the given periodic function.": [
        "def find_min_periodic_function_value(period, coefficients):\n    min_value = float('inf')\n    for x in range(period):\n        value = sum(coefficients[i] * ((x ** (i + 1)) % period) for i in range(len(coefficients)))\n        if value < min_value:\n            min_value = value\n    return min_value\n\n# Example usage:\n# period = 5\n# coefficients = [1, -2, 1]  # Represents f(x) = x - 2x^2 + x^3\n# print(find_min_periodic_function_value(period, coefficients))"
    ],
    "Write a python function to remove the k'th element from a given list.": [
        "def remove_kth_element(lst, k):\n    if 0 <= k < len(lst):\n        return lst[:k] + lst[k+1:]\n    return lst"
    ],
    "Write a function to find the maximum of nth column from the given tuple list.": [
        "def max_of_nth_column(tuple_list, n):\n    return max(item[n] for item in tuple_list)"
    ],
    "Write a python function to merge the first and last elements separately in a list of lists.": [
        "def merge_first_last_elements(list_of_lists):\n    merged_list = []\n    for lst in list_of_lists:\n        if len(lst) > 0:\n            merged_list.append(lst[0])\n        if len(lst) > 1:\n            merged_list.append(lst[-1])\n    return merged_list"
    ],
    "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.": [
        "def find_max_in_record(records):\n    return max(max(record) for record in records)\n\n# Example usage:\nrecords = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(find_max_in_record(records))  # Output: 9"
    ],
    "Write a function to find the cumulative sum of all the values that are present in the given tuple list.": [
        "def cumulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"
    ],
    "Write a function to find average value of the numbers in a given tuple of tuples.": [
        "def average_of_tuples(tuples):\n    total = 0\n    count = 0\n    for inner_tuple in tuples:\n        for num in inner_tuple:\n            total += num\n            count += 1\n    return total / count if count != 0 else 0\n\n# Example usage:\n# tuples = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n# print(average_of_tuples(tuples))  # Output: 5.0"
    ],
    "Write a function to perfom the modulo of tuple elements in the given two tuples.": [
        "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"
    ],
    "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.": [
        "import math\n\ndef min_jumps_to_point(d, l):\n    if d < l:\n        return -1\n    jumps = math.ceil(d / l)\n    if (jumps * l - d) % 2 == 0:\n        return jumps\n    elif (jumps + 1) * l - d >= 2 and (jumps + 1) * l - d <= 4 * l:\n        return jumps + 1\n    else:\n        return -1\n\n# Example usage:\n# print(min_jumps_to_point(10, 3))  # Output: 3\n# print(min_jumps_to_point(8, 2))   # Output: 4"
    ],
    "Write a function to divide two lists using map and lambda function.": [
        "def divide_lists(list1, list2):\n    return list(map(lambda x, y: x / y if y != 0 else float('inf'), list1, list2))"
    ],
    "Write a function to move all the numbers in it to the given string.": [
        "def move_numbers_to_string(input_string):\n    result = ''.join([char for char in input_string if char.isdigit()])\n    return result\n\n# Example usage:\ninput_str = \"a1b2c3d4\"\noutput_str = move_numbers_to_string(input_str)\nprint(output_str)  # Output: \"1234\""
    ],
    "Write a function to find the largest subset where each pair is divisible.": [
        "def largestDivisibleSubset(nums):\n    if not nums:\n        return []\n    \n    nums.sort()\n    dp = [1] * len(nums)\n    parent = [-1] * len(nums)\n    max_index = 0\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                parent[i] = j\n        if dp[i] > dp[max_index]:\n            max_index = i\n    \n    result = []\n    while max_index != -1:\n        result.append(nums[max_index])\n        max_index = parent[max_index]\n    \n    return result[::-1]"
    ],
    "Write a function to increment the numeric values in the given strings by k.": [
        "def increment_numeric_values(strings, k):\n    result = []\n    for s in strings:\n        if s.isdigit():\n            result.append(str(int(s) + k))\n        else:\n            result.append(s)\n    return result"
    ],
    "Write a function to find the median of two sorted arrays of same size.": [
        "def findMedianSortedArrays(nums1, nums2):\n    combined = sorted(nums1 + nums2)\n    n = len(combined)\n    if n % 2 == 0:\n        return (combined[n//2 - 1] + combined[n//2]) / 2\n    else:\n        return combined[n//2]"
    ],
    "Write a function to find the n-th power of individual elements in a list using lambda function.": [
        "def nth_power_list(lst, n):\n    return list(map(lambda x: x ** n, lst))"
    ],
    "Write a python function to convert the given string to upper case.": [
        "def to_upper_case(s):\n    return s.upper()"
    ],
    "Write a python function to interchange first and last elements in a given list.": [
        "def interchange_first_last(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    ],
    "Write a python function to find the largest triangle that can be inscribed in the semicircle.": [
        "import math\n\ndef largest_triangle_in_semicircle(radius):\n    # The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    # with the hypotenuse as the diameter of the semicircle.\n    # Therefore, the base of the triangle is the diameter (2 * radius)\n    # and the height is the radius of the semicircle.\n    \n    base = 2 * radius\n    height = radius\n    \n    # Area of the triangle\n    area = 0.5 * base * height\n    \n    return area\n\n# Example usage:\nradius = 5\nprint(largest_triangle_in_semicircle(radius))"
    ],
    "Write a python function to find the smallest missing number from the given array.": [
        "def find_smallest_missing_number(arr):\n    arr = set(arr)\n    smallest_missing = 0\n    while smallest_missing in arr:\n        smallest_missing += 1\n    return smallest_missing"
    ],
    "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.": [
        "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')"
    ],
    "Write a python function to find even numbers from a mixed list.": [
        "def find_even_numbers(mixed_list):\n    return [num for num in mixed_list if isinstance(num, int) and num % 2 == 0]"
    ],
    "Write a function to extract all the adjacent coordinates of the given coordinate tuple.": [
        "def get_adjacent_coordinates(coord):\n    x, y = coord\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]"
    ],
    "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.": [
        "import re\n\ndef swap_spaces_and_underscores(s):\n    return re.sub(r'(\\s+|_+)', lambda x: '_' if x.group(0).isspace() else ' ', s)"
    ],
    "Write a python function to move all zeroes to the end of the given list.": [
        "def move_zeroes_to_end(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[count] = nums[i]\n            count += 1\n    for i in range(count, len(nums)):\n        nums[i] = 0\n    return nums"
    ],
    "Write a python function to find the sum of xor of all pairs of numbers in the given array.": [
        "def sum_of_xor_pairs(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum"
    ],
    "Write a python function to find the sum of fourth power of first n even natural numbers.": [
        "def sum_of_fourth_powers(n):\n    return sum((2*i)**4 for i in range(1, n+1))"
    ],
    "Write a function to push all values into a heap and then pop off the smallest values one at a time.": [
        "import heapq\n\ndef process_values(values):\n    heapq.heapify(values)\n    while values:\n        yield heapq.heappop(values)"
    ],
    "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.": [
        "def are_roots_reciprocal(a, b, c):\n    return b == 0 and a == c"
    ],
    "Write a function to check whether the given amount has no profit and no loss": [
        "def is_no_profit_no_loss(cost_price, selling_price):\n    return cost_price == selling_price"
    ],
    "Write a function to calculate wind chill index.": [
        "def wind_chill_index(temperature, wind_speed):\n    if temperature > 10 or wind_speed < 4.8:\n        return \"Wind chill calculation not applicable\"\n    else:\n        return 13.12 + 0.6215 * temperature - 11.37 * wind_speed**0.16 + 0.3965 * temperature * wind_speed**0.16"
    ],
    "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.": [
        "def sum_of_names_length(names):\n    return sum(len(name) for name in names if name[0].isupper())"
    ],
    "Write a function to remove the parenthesis area in a string.": [
        "import re\n\ndef remove_parenthesis_area(s):\n    return re.sub(r'\\(.*?\\)', '', s)"
    ],
    "Write a function to find the nth nonagonal number.": [
        "def nonagonal_number(n):\n    return n * (7 * n - 5) // 2"
    ],
    "Write a function to remove similar rows from the given tuple matrix.": [
        "def remove_similar_rows(matrix):\n    unique_matrix = []\n    for row in matrix:\n        if row not in unique_matrix:\n            unique_matrix.append(row)\n    return tuple(unique_matrix)\n\n# Example usage:\nmatrix = ((1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9))\nresult = remove_similar_rows(matrix)\nprint(result)"
    ],
    "Write a function that matches a word containing 'z', not at the start or end of the word.": [
        "import re\n\ndef match_word_with_z(word):\n    pattern = r'\\Bz\\B'\n    return bool(re.search(pattern, word))\n\n# Test cases\nprint(match_word_with_z(\"amazing\"))  # True\nprint(match_word_with_z(\"buzz\"))     # False\nprint(match_word_with_z(\"fizz\"))     # True\nprint(match_word_with_z(\"zap\"))      # False\nprint(match_word_with_z(\"pizza\"))    # True"
    ],
    "Write a python function to reverse an array upto a given position.": [
        "def reverse_array_upto(arr, position):\n    arr[:position] = arr[:position][::-1]\n    return arr"
    ],
    "Write a function to find the product of it\u2019s kth index in the given tuples.": [
        "def product_of_kth_index(tuples_list, k):\n    product = 1\n    for tup in tuples_list:\n        if k < len(tup):\n            product *= tup[k]\n    return product\n\n# Example usage:\n# tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n# print(product_of_kth_index(tuples, 1))  # Output: 80"
    ],
    "Write a python function to count number of cubes of size k in a cube of size n.": [
        "def count_cubes(n, k):\n    return (n - k + 1) ** 3"
    ],
    "Write a function to split a string at uppercase letters.": [
        "import re\n\ndef split_at_uppercase(s):\n    return re.findall('[A-Z][^A-Z]*', s)"
    ],
    "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.": [
        "def exchange_positions(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst"
    ],
    "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.": [
        "def sum_in_range(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])"
    ],
    "Write a python function to check whether the given two arrays are equal or not.": [
        "def are_arrays_equal(arr1, arr2):\n    return arr1 == arr2"
    ],
    "Write a function to check if one tuple is a subset of another tuple.": [
        "def is_subset(tuple1, tuple2):\n    return all(item in tuple2 for item in tuple1)"
    ],
    "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.": [
        "def flatten_matrix_to_columns(matrix):\n    if not matrix or not matrix[0]:\n        return ()\n    \n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    columns = []\n    for col in range(num_cols):\n        column_elements = tuple(matrix[row][col] for row in range(num_rows))\n        columns.append(column_elements)\n    \n    return tuple(columns)"
    ],
    "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.": [
        "from collections import defaultdict\n\ndef group_key_value_pairs(pairs):\n    grouped_dict = defaultdict(list)\n    for key, value in pairs:\n        grouped_dict[key].append(value)\n    return dict(grouped_dict)"
    ],
    "Write a function to find the perimeter of a rectangle.": [
        "def rectangle_perimeter(length, width):\n    return 2 * (length + width)"
    ],
    "Write a python function to find the sum of fifth power of n natural numbers.": [
        "def sum_of_fifth_powers(n):\n    return sum(i**5 for i in range(1, n+1))"
    ],
    "Write a python function to find the minimum sum of absolute differences of two arrays.": [
        "def min_abs_diff_sum(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    return sum(abs(a - b) for a, b in zip(arr1, arr2))"
    ],
    "Write a python function to find the first digit in factorial of a given number.": [
        "def first_digit_factorial(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n        while fact % 10 == 0:\n            fact //= 10\n    while fact >= 10:\n        fact //= 10\n    return fact\n\n# Example usage:\n# print(first_digit_factorial(5))  # Output: 1"
    ],
    "Write a function to find the item with maximum occurrences in a given list.": [
        "def max_occurrences(lst):\n    from collections import Counter\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [item for item, freq in count.items() if freq == max_count]"
    ],
    "Write a python function to print duplicants from a list of integers.": [
        "def print_duplicates(nums):\n    seen = set()\n    duplicates = set()\n    for num in nums:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    for duplicate in duplicates:\n        print(duplicate)"
    ],
    "Write a python function to choose points from two ranges such that no point lies in both the ranges.": [
        "def choose_points(range1, range2):\n    start1, end1 = range1\n    start2, end2 = range2\n    \n    if end1 <= start2:\n        return list(range(start1, end1)) + list(range(start2, end2))\n    elif end2 <= start1:\n        return list(range(start1, end1)) + list(range(start2, end2))\n    else:\n        return \"Ranges overlap\"\n\n# Example usage:\nrange1 = (1, 5)\nrange2 = (8, 10)\nprint(choose_points(range1, range2))"
    ],
    "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.": [
        "def max_sum_no_three_consecutive(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    \n    incl = arr[0] + max(arr[2], (arr[1] if n > 1 else 0))\n    excl = max(arr[0], arr[1])\n    excl_new = max(excl, incl)\n    \n    for i in range(3, n):\n        incl = excl_new + arr[i]\n        excl_new = max(excl_new, excl)\n        excl = incl\n    \n    return max(excl_new, excl)"
    ],
    "Write a function to sort a list in a dictionary.": [
        "def sort_list_in_dict(input_dict):\n    sorted_dict = {k: sorted(v) for k, v in input_dict.items()}\n    return sorted_dict"
    ],
    "Write a function to find the largest possible value of k such that k modulo x is y.": [
        "def largest_k_modulo(x, y):\n    if y == 0:\n        return float('inf')\n    if y > x:\n        return -1\n    return x * (y // x) + y - x"
    ],
    "Write a python function to find the average of even numbers till a given even number.": [
        "def average_of_evens(n):\n    if n % 2 != 0:\n        return \"Please enter an even number\"\n    \n    total = 0\n    count = 0\n    \n    for i in range(2, n + 1, 2):\n        total += i\n        count += 1\n    \n    return total / count"
    ],
    "Write a python function to shift first element to the end of given list.": [
        "def shift_first_to_end(lst):\n    if lst:\n        lst.append(lst.pop(0))\n    return lst"
    ],
    "Write a function to count occurrence of a character in a string.": [
        "def count_character_occurrence(string, char):\n    return string.count(char)"
    ],
    "Write a python function to count number of vowels in the string.": [
        "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)"
    ],
    "Write a python function to replace multiple occurence of character by single.": [
        "def replace_multiple_occurrences(s, char):\n    if not s or len(char) != 1:\n        return s\n    result = [s[0]]\n    for c in s[1:]:\n        if c != char or result[-1] != char:\n            result.append(c)\n    return ''.join(result)"
    ],
    "Write a function to check whether the given ip address is valid or not using regex.": [
        "import re\n\ndef is_valid_ip(ip):\n    pattern = re.compile(r'^(\\d{1,3}\\.){3}\\d{1,3}$')\n    if pattern.match(ip):\n        parts = ip.split('.')\n        return all(0 <= int(part) <= 255 for part in parts)\n    return False"
    ],
    "Write a python function to check whether a sequence of numbers has a decreasing trend or not.": [
        "def is_decreasing(sequence):\n    return all(x > y for x, y in zip(sequence, sequence[1:]))"
    ],
    "Write a python function to set the right most unset bit.": [
        "def set_rightmost_unset_bit(n):\n    return n | (n + 1)"
    ],
    "Write a function to find maximum of three numbers.": [
        "def max_of_three(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c"
    ],
    "Write a python function to convert a list of multiple integers into a single integer.": [
        "def list_to_single_integer(int_list):\n    return int(''.join(map(str, int_list)))"
    ],
    "Write a function to remove duplicate words from a given string using collections module.": [
        "from collections import OrderedDict\n\ndef remove_duplicate_words(input_string):\n    words = input_string.split()\n    ordered_dict = OrderedDict.fromkeys(words)\n    return ' '.join(ordered_dict.keys())"
    ],
    "Write a function to add two integers. however, if the sum is between the given range it will return 20.": [
        "def add_with_range(a, b, lower_bound, upper_bound):\n    total = a + b\n    if lower_bound <= total <= upper_bound:\n        return 20\n    return total"
    ],
    "Write a function to remove everything except alphanumeric characters from the given string by using regex.": [
        "import re\n\ndef clean_string(input_string):\n    return re.sub(r'[^a-zA-Z0-9]', '', input_string)"
    ],
    "Write a function to check if the triangle is valid or not.": [
        "def is_valid_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a"
    ],
    "Write a python function to remove spaces from a given string.": [
        "def remove_spaces(input_string):\n    return input_string.replace(\" \", \"\")"
    ],
    "Write a function to access dictionary key\u2019s element by index.": [
        "def get_key_by_index(dictionary, index):\n    return list(dictionary.keys())[index]"
    ],
    "Write a python function to check whether a sequence of numbers has an increasing trend or not.": [
        "def has_increasing_trend(sequence):\n    return all(x < y for x, y in zip(sequence, sequence[1:]))"
    ],
    "Write a python function to find the smallest prime divisor of a number.": [
        "def smallest_prime_divisor(n):\n    if n <= 1:\n        return None\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n"
    ],
    "Write a function to multiply two lists using map and lambda function.": [
        "def multiply_lists(list1, list2):\n    return list(map(lambda x, y: x * y, list1, list2))"
    ],
    "Write a python function to check whether the given number can be represented by sum of two squares or not.": [
        "import math\n\ndef is_sum_of_two_squares(n):\n    for i in range(int(math.sqrt(n)) + 1):\n        j = int(math.sqrt(n - i * i))\n        if i * i + j * j == n:\n            return True\n    return False"
    ],
    "Write a python function to count occurences of a character in a repeated string.": [
        "def count_occurrences(s, n, char):\n    count = s.count(char)\n    length = len(s)\n    full_repeats = n // length\n    partial_length = n % length\n    return count * full_repeats + s[:partial_length].count(char)\n\n# Example usage:\ns = \"abcac\"\nn = 10\nchar = 'a'\nprint(count_occurrences(s, n, char))  # Output: 4"
    ],
    "Write a python function to find sum of prime numbers between 1 to n.": [
        "def sum_of_primes(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    total_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            total_sum += i\n    return total_sum"
    ],
    "Write a function to find the frequency of each element in the given list.": [
        "def find_frequency(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency"
    ],
    "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.": [
        "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)"
    ],
    "Write a function to get the length of a complex number.": [
        "def complex_length(c):\n    return abs(c)"
    ],
    "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block": [
        "def min_jumps(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return float('inf')\n    \n    max_steps = arr[0]\n    step = arr[0]\n    jump = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        \n        max_steps = max(max_steps, i + arr[i])\n        step -= 1\n        \n        if step == 0:\n            jump += 1\n            if i >= max_steps:\n                return float('inf')\n            step = max_steps - i\n    \n    return float('inf')"
    ],
    "Write a function to multiply consecutive numbers of a given list.": [
        "def multiply_consecutive_numbers(numbers):\n    result = [numbers[i] * numbers[i + 1] for i in range(len(numbers) - 1)]\n    return result"
    ],
    "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.": [
        "def group_by_second_element(tuple_list):\n    grouped_dict = {}\n    for item in tuple_list:\n        if item[1] not in grouped_dict:\n            grouped_dict[item[1]] = []\n        grouped_dict[item[1]].append(item[0])\n    return grouped_dict"
    ],
    "Write a python function to find the last two digits in factorial of a given number.": [
        "def last_two_digits_of_factorial(n):\n    if n >= 10:\n        return 0\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % 100\n    return result"
    ],
    "Write a function to remove multiple spaces in a string by using regex.": [
        "import re\n\ndef remove_multiple_spaces(s):\n    return re.sub(r'\\s+', ' ', s).strip()"
    ],
    "Write a function to extract unique values from the given dictionary values.": [
        "def extract_unique_values(d):\n    unique_values = set()\n    for values in d.values():\n        if isinstance(values, list):\n            unique_values.update(values)\n        else:\n            unique_values.add(values)\n    return list(unique_values)"
    ],
    "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.": [
        "def are_elements_greater(tuple1, tuple2):\n    return all(x < y for x, y in zip(tuple1, tuple2))"
    ],
    "Write a function to zip two given lists of lists.": [
        "def zip_lists(list1, list2):\n    return [list(a) + list(b) for a, b in zip(list1, list2)]"
    ],
    "Write a function to find number of even elements in the given list using lambda function.": [
        "def count_even_elements(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))"
    ],
    "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.": [
        "def sort_dict_by_tuple_product(d):\n    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))"
    ],
    "Write a python function to find the minimum number of swaps required to convert one binary string to another.": [
        "def min_swaps(str1, str2):\n    if len(str1) != len(str2):\n        return -1\n    \n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            if str1[i] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n    \n    if (count_0 + count_1) % 2 != 0:\n        return -1\n    \n    swaps = count_0 // 2 + count_1 // 2 + (count_0 % 2) * 2\n    \n    return swaps"
    ],
    "Write a function to count the number of elements in a list which are within a specific range.": [
        "def count_elements_in_range(lst, lower_bound, upper_bound):\n    count = 0\n    for num in lst:\n        if lower_bound <= num <= upper_bound:\n            count += 1\n    return count"
    ],
    "Write a function to find the equilibrium index of the given array.": [
        "def find_equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1"
    ],
    "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.": [
        "def min_removals_to_make_range_k(arr, k):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    max_len = 0\n    \n    for right in range(n):\n        while arr[right] - arr[left] > k:\n            left += 1\n        max_len = max(max_len, right - left + 1)\n    \n    return n - max_len"
    ],
    "Write a function to check whether the given key is present in the dictionary or not.": [
        "def is_key_present(dictionary, key):\n    return key in dictionary"
    ],
    "Write a function to calculate the harmonic sum of n-1.": [
        "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)"
    ],
    "Write a function to sort a list of lists by length and value.": [
        "def sort_lists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"
    ],
    "Write a function to find whether an array is subset of another array.": [
        "def is_subset(arr1, arr2):\n    return set(arr1).issubset(set(arr2))"
    ],
    "Write a python function to count the total set bits from 1 to n.": [
        "def count_set_bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count"
    ],
    "Write a python function to convert a string to a list.": [
        "def string_to_list(s):\n    return list(s)"
    ],
    "Write a function to count unique keys for each value present in the tuple.": [
        "def count_unique_keys_per_value(input_tuple):\n    from collections import defaultdict\n    result = defaultdict(set)\n    for key, value in input_tuple:\n        result[value].add(key)\n    return {value: len(keys) for value, keys in result.items()}\n\n# Example usage:\n# input_tuple = (('a', 1), ('b', 1), ('c', 2), ('a', 2), ('d', 3))\n# print(count_unique_keys_per_value(input_tuple))\n# Output: {1: 2, 2: 2, 3: 1}"
    ],
    "Write a function to access the initial and last data of the given tuple record.": [
        "def access_initial_and_last(record):\n    initial = record[0]\n    last = record[-1]\n    return initial, last\n\n# Example usage:\n# record = (1, 2, 3, 4, 5)\n# initial, last = access_initial_and_last(record)\n# print(initial)  # Output: 1\n# print(last)     # Output: 5"
    ],
    "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.": [
        "def product_even_odd_places_equal(n):\n    n = str(n)\n    product_even = 1\n    product_odd = 1\n    \n    for i in range(len(n)):\n        if i % 2 == 0:\n            product_odd *= int(n[i])\n        else:\n            product_even *= int(n[i])\n    \n    return product_even == product_odd"
    ],
    "Write a function to remove duplicates from a list of lists.": [
        "def remove_duplicates(list_of_lists):\n    return [list(x) for x in set(tuple(row) for row in list_of_lists)]"
    ],
    "Write a function to check if the given tuple contains all valid values or not.": [
        "def are_all_valid_values(input_tuple):\n    return all(value is not None and value != \"\" for value in input_tuple)"
    ],
    "Write a python function to count the number of distinct power of prime factor of given number.": [
        "def distinct_prime_powers(n):\n    def prime_factors(n):\n        factors = set()\n        d = 2\n        while d * d <= n:\n            while (n % d) == 0:\n                factors.add(d)\n                n //= d\n            d += 1\n        if n > 1:\n            factors.add(n)\n        return factors\n\n    prime_set = prime_factors(n)\n    powers_count = 0\n\n    for prime in prime_set:\n        count = 0\n        temp = n\n        while temp % prime == 0:\n            count += 1\n            temp //= prime\n        powers_count += count + 1\n\n    return powers_count - len(prime_set)\n\n# Example usage:\n# print(distinct_prime_powers(60))  # Output: 4 (2^2, 3^1, 5^1)"
    ],
    "Write a function to convert the given string of integers into a tuple.": [
        "def string_to_tuple(s):\n    return tuple(map(int, s.split()))"
    ],
    "Write a function to find the perimeter of a rombus.": [
        "def rhombus_perimeter(side_length):\n    return 4 * side_length"
    ],
    "Write a function to calculate the standard deviation.": [
        "import math\n\ndef standard_deviation(data):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / len(data)\n    return math.sqrt(variance)"
    ],
    "Write a function to create a list taking alternate elements from another given list.": [
        "def alternate_elements(lst):\n    return lst[::2]"
    ],
    "Write a function that matches a string that has an a followed by zero or more b's.": [
        "import re\n\ndef match_string(s):\n    pattern = r'ab*'\n    return bool(re.match(pattern, s))"
    ],
    "Write a function to add a dictionary to the tuple.": [
        "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)"
    ],
    "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.": [
        "import numpy as np\n\ndef max_average_path(matrix):\n    n = len(matrix)\n    dp = np.zeros((n, n))\n    \n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if i == n-1 and j == n-1:\n                dp[i][j] = matrix[i][j]\n            elif i == n-1:\n                dp[i][j] = matrix[i][j] + dp[i][j+1]\n            elif j == n-1:\n                dp[i][j] = matrix[i][j] + dp[i+1][j]\n            else:\n                dp[i][j] = matrix[i][j] + max(dp[i+1][j], dp[i][j+1])\n    \n    path_sum = dp[0][0]\n    count = 1\n    x, y = 0, 0\n    \n    while x != n-1 or y != n-1:\n        if x == n-1:\n            y += 1\n        elif y == n-1:\n            x += 1\n        elif dp[x+1][y] > dp[x][y+1]:\n            x += 1\n        else:\n            y += 1\n        path_sum += matrix[x][y]\n        count += 1\n    \n    return path_sum / count"
    ],
    "Write a function to filter the height and width of students which are stored in a dictionary.": [
        "def filter_students(students, min_height, min_width):\n    filtered_students = {name: {'height': student['height'], 'width': student['width']}\n                        for name, student in students.items()\n                        if student['height'] >= min_height and student['width'] >= min_width}\n    return filtered_students"
    ],
    "Write a function to count the same pair in two given lists using map function.": [
        "def count_same_pairs(list1, list2):\n    return sum(map(lambda x, y: x == y, list1, list2))"
    ],
    "Write a function to calculate the sum of all digits of the base to the specified power.": [
        "def sum_of_digits(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\n# Example usage:\n# print(sum_of_digits(2, 1000))"
    ],
    "Write a function to extract values between quotation marks of the given string by using regex.": [
        "import re\n\ndef extract_quoted_values(s):\n    return re.findall(r'\"(.*?)\"', s)"
    ],
    "Write a function to multiply the adjacent elements of the given tuple.": [
        "def multiply_adjacent_elements(input_tuple):\n    result = tuple(x * y for x, y in zip(input_tuple, input_tuple[1:]))\n    return result"
    ],
    "Write a function to remove all characters except letters and numbers using regex": [
        "import re\n\ndef remove_non_alphanumeric(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)"
    ],
    "Write a function to sum elements in two lists.": [
        "def sum_elements(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]"
    ],
    "Write a function to add two lists using map and lambda function.": [
        "def add_lists(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))"
    ],
    "Write a function to remove consecutive duplicates of a given list.": [
        "def remove_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result"
    ],
    "Write a function to find the lateral surface area of a cone.": [
        "import math\n\ndef lateral_surface_area_of_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    lateral_surface_area = math.pi * radius * slant_height\n    return lateral_surface_area"
    ],
    "Write a function to replace all occurrences of spaces, commas, or dots with a colon.": [
        "def replace_chars(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')"
    ],
    "Write a function to find the index of the first occurrence of a given number in a sorted array.": [
        "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    ],
    "Write a python function to find sum of products of all possible subarrays.": [
        "def sum_of_products_subarrays(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = arr[i]\n        total_sum += current_product\n        for j in range(i + 1, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum\n\n# Example usage:\narr = [1, 2, 3]\nprint(sum_of_products_subarrays(arr))  # Output: 35"
    ],
    "Write a python function to toggle bits of the number except the first and the last bit.": [
        "def toggle_middle_bits(n):\n    # Find the position of the most significant bit\n    msb_pos = n.bit_length() - 1\n    \n    # If the number has less than 3 bits, return the number as it is\n    if msb_pos <= 1:\n        return n\n    \n    # Create a mask with all bits set to 1 except the first and last bit\n    mask = (1 << msb_pos) | 1\n    \n    # Toggle the middle bits using XOR\n    result = n ^ mask\n    \n    return result"
    ],
    "Write a function to locate the left insertion point for a specified value in sorted order.": [
        "import bisect\n\ndef find_left_insertion_point(sorted_list, value):\n    return bisect.bisect_left(sorted_list, value)"
    ],
    "Write a function to check whether the given string is starting with a vowel or not using regex.": [
        "import re\n\ndef starts_with_vowel(s):\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, s))"
    ],
    "Write a function to calculate the geometric sum of n-1.": [
        "def geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    ],
    "Write a python function to find the index of smallest triangular number with n digits.": [
        "import math\n\ndef find_smallest_triangular_with_n_digits(n):\n    min_value = 10**(n-1)\n    max_value = 10**n - 1\n    x = math.ceil((math.sqrt(1 + 8 * min_value) - 1) / 2)\n    while True:\n        triangular_number = x * (x + 1) // 2\n        if triangular_number > max_value:\n            return -1\n        if len(str(triangular_number)) == n:\n            return x\n        x += 1\n\n# Example usage:\n# print(find_smallest_triangular_with_n_digits(2))"
    ],
    "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.": [
        "def tuple_to_dict(tup):\n    return dict(zip(tup[::2], tup[1::2]))"
    ],
    "Write a python function to check whether all the characters are same or not.": [
        "def all_characters_same(s):\n    return len(set(s)) == 1"
    ],
    "Write a function to caluclate the area of a tetrahedron.": [
        "import math\n\ndef tetrahedron_area(edge_length):\n    return math.sqrt(3) * edge_length ** 2"
    ],
    "Write a function to rotate a given list by specified number of items to the right direction.": [
        "def rotate_list(lst, n):\n    if not lst:\n        return lst\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    ],
    "Write a function to check if the given tuple has any none value or not.": [
        "def has_none_value(tup):\n    return None in tup"
    ],
    "Write a function to find numbers within a given range where every number is divisible by every digit it contains.": [
        "def find_divisible_numbers(start, end):\n    def is_divisible_by_its_digits(number):\n        digits = [int(d) for d in str(number) if d != '0']\n        return all(number % digit == 0 for digit in digits)\n    \n    return [num for num in range(start, end + 1) if is_divisible_by_its_digits(num)]\n\n# Example usage:\nstart = 1\nend = 100\nresult = find_divisible_numbers(start, end)\nprint(result)"
    ],
    "Write a function to find area of a sector.": [
        "import math\n\ndef sector_area(radius, angle):\n    return (angle / 360) * math.pi * radius ** 2"
    ],
    "Write a function to find the longest common subsequence for the given three string sequence.": [
        "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n \n    return L[m][n][o]"
    ],
    "Write a function to put spaces between words starting with capital letters in a given string by using regex.": [
        "import re\n\ndef add_spaces_to_capitals(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', s)\n\n# Example usage:\ninput_string = \"ThisIsAnExampleString\"\noutput_string = add_spaces_to_capitals(input_string)\nprint(output_string)  # Output: \"This Is An Example String\""
    ],
    "Write a function to sort a given list of strings of numbers numerically.": [
        "def sort_numerical_strings(strings):\n    return sorted(strings, key=int)"
    ],
    "Write a function to add the given tuple to the given list.": [
        "def add_tuple_to_list(input_list, input_tuple):\n    input_list.extend(input_tuple)\n    return input_list"
    ],
    "Write a function to check if the given array represents min heap or not.": [
        "def is_min_heap(arr):\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if (left < n and arr[i] > arr[left]) or (right < n and arr[i] > arr[right]):\n            return False\n    return True"
    ],
    "Write a function to find the nth jacobsthal number.": [
        "def jacobsthal(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal(n - 1) + 2 * jacobsthal(n - 2)"
    ],
    "Write a function to find minimum k records from tuple list.": [
        "def find_min_k_records(data, k):\n    return sorted(data, key=lambda x: x[1])[:k]"
    ],
    "Write a function to find common index elements from three lists.": [
        "def common_index_elements(list1, list2, list3):\n    return [list1[i] for i in range(min(len(list1), len(list2), len(list3))) if list1[i] == list2[i] == list3[i]]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [0, 2, 6, 4, 8]\nlist3 = [1, 2, 9, 4, 5]\nprint(common_index_elements(list1, list2, list3))  # Output: [2, 4]"
    ],
    "Write a function to find the second smallest number in a list.": [
        "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in numbers:\n        if num < first:\n            first, second = num, first\n        elif num < second and num != first:\n            second = num\n    return second if second != float('inf') else None"
    ],
    "Write a function that matches a string that has an a followed by zero or one 'b'.": [
        "import re\n\ndef match_ab(s):\n    pattern = r'ab?'\n    return bool(re.match(pattern, s))"
    ],
    "Write a function to count the pairs of reverse strings in the given string list.": [
        "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for s in string_list:\n        if s[::-1] in seen:\n            count += 1\n        seen.add(s)\n    return count"
    ],
    "Write a function to count number of unique lists within a list.": [
        "def count_unique_lists(list_of_lists):\n    unique_lists = set(map(tuple, list_of_lists))\n    return len(unique_lists)"
    ],
    "Write a function to check a decimal with a precision of 2.": [
        "def check_decimal_precision(number):\n    return isinstance(number, float) and round(number, 2) == number"
    ],
    "Write a python function to check whether an array contains only one distinct element or not.": [
        "def contains_one_distinct_element(arr):\n    return len(set(arr)) == 1"
    ],
    "Write a function to caluclate arc length of an angle.": [
        "import math\n\ndef calculate_arc_length(radius, angle_in_degrees):\n    angle_in_radians = math.radians(angle_in_degrees)\n    arc_length = radius * angle_in_radians\n    return arc_length"
    ],
    "Write a function to check whether the given month number contains 30 days or not.": [
        "def has_30_days(month):\n    return month in [4, 6, 9, 11]"
    ],
    "Write a python function to find the minimum difference between any two elements in a given array.": [
        "def min_difference(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    ],
    "Write a python function to count numeric values in a given string.": [
        "def count_numeric_values(input_string):\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count"
    ],
    "Write a function to find nth polite number.": [
        "def nth_polite_number(n):\n    count = 0\n    i = 1\n    while count < n:\n        if (i & (i + 1)) != 0:\n            count += 1\n        i += 1\n    return i - 1"
    ],
    "Write a function to iterate over all pairs of consecutive items in a given list.": [
        "def consecutive_pairs(lst):\n    for i in range(len(lst) - 1):\n        yield lst[i], lst[i + 1]"
    ],
    "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.": [
        "def count_pairs_with_sum(arr, target_sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count"
    ],
    "Write a python function to check for odd parity of a given number.": [
        "def has_odd_parity(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count % 2 != 0"
    ],
    "Write a python function to get the difference between two lists.": [
        "def list_difference(list1, list2):\n    return [item for item in list1 if item not in list2]"
    ],
    "Write a python function to find the sum of fourth power of first n odd natural numbers.": [
        "def sum_of_fourth_power_odd_numbers(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total_sum += odd_number ** 4\n    return total_sum"
    ],
    "Write a function to check if the given expression is balanced or not.": [
        "def is_balanced(expression):\n    stack = []\n    opening_brackets = set('([{')\n    closing_brackets = set(')]}')\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    \n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if stack and stack[-1] == matching_bracket[char]:\n                stack.pop()\n            else:\n                return False\n    \n    return not stack\n\n# Example usage:\nexpression = \"{[()()]}\"\nprint(is_balanced(expression))  # Output: True\n\nexpression = \"{[(])}\"\nprint(is_balanced(expression))  # Output: False"
    ],
    "Write a function to remove all the words with k length in the given string.": [
        "def remove_words_of_length_k(s, k):\n    words = s.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Example usage:\ns = \"this is a test string\"\nk = 2\nresult = remove_words_of_length_k(s, k)\nprint(result)  # Output: \"this is a test\""
    ],
    "Write a function to find the occurrence and position of the substrings within a string.": [
        "def find_substring_occurrences(string, substring):\n    occurrences = []\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        occurrences.append(start)\n        start += len(substring)\n    return occurrences"
    ],
    "Write a function to check if the string is a valid email address or not using regex.": [
        "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None"
    ],
    "Write a python function to check whether every odd index contains odd numbers of a given list.": [
        "def check_odd_indices(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))"
    ],
    "Write a function to count those characters which have vowels as their neighbors in the given string.": [
        "def count_chars_with_vowel_neighbors(s):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(1, len(s) - 1):\n        if s[i] not in vowels and (s[i-1] in vowels or s[i+1] in vowels):\n            count += 1\n    return count"
    ],
    "Write a python function to find the sum of non-repeated elements in a given array.": [
        "def sum_of_non_repeated_elements(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return sum([num for num, freq in count.items() if freq == 1])"
    ],
    "Write a function to pack consecutive duplicates of a given list elements into sublists.": [
        "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed = [[lst[0]]]\n    for item in lst[1:]:\n        if item == packed[-1][0]:\n            packed[-1].append(item)\n        else:\n            packed.append([item])\n    \n    return packed"
    ],
    "Write a function to count the number of unique lists within a list.": [
        "def count_unique_lists(list_of_lists):\n    return len(set(tuple(sublist) for sublist in list_of_lists))"
    ],
    "Write a function to find the combinations of sums with tuples in the given tuple list.": [
        "from itertools import combinations\n\ndef find_combinations_of_sums(tuple_list, target_sum):\n    all_combinations = []\n    for r in range(1, len(tuple_list) + 1):\n        for combo in combinations(tuple_list, r):\n            if sum(combo) == target_sum:\n                all_combinations.append(combo)\n    return all_combinations\n\n# Example usage:\ntuple_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\ntarget_sum = 10\nprint(find_combinations_of_sums(tuple_list, target_sum))"
    ],
    "Write a python function to check whether the count of divisors is even or odd.": [
        "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n\n# Example usage:\n# print(count_divisors(28))  # Output: \"Even\"\n# print(count_divisors(36))  # Output: \"Odd\""
    ],
    "Write a python function to find the sum of all odd length subarrays.": [
        "def sum_odd_length_subarrays(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for end in range(start, n, 2):\n            total_sum += sum(arr[start:end+1])\n    \n    return total_sum"
    ],
    "Write a function to convert rgb color to hsv color.": [
        "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v"
    ],
    "Write a function to find the product of first even and odd number of a given list.": [
        "def product_of_first_even_odd(numbers):\n    even = None\n    odd = None\n    for num in numbers:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return None"
    ],
    "Write a function to convert tuple string to integer tuple.": [
        "def tuple_string_to_int_tuple(tuple_string):\n    return tuple(int(x.strip()) for x in tuple_string.strip('()').split(','))"
    ],
    "Write a function to locate the right insertion point for a specified value in sorted order.": [
        "import bisect\n\ndef find_insertion_point(sorted_list, value):\n    return bisect.bisect_right(sorted_list, value)"
    ],
    "Write a function that matches a string that has an a followed by three 'b'.": [
        "import re\n\ndef match_string(text):\n    patterns = 'ab{3}'\n    if re.search(patterns, text):\n        return True\n    else:\n        return False"
    ],
    "Write a function to create a new tuple from the given string and list.": [
        "def create_tuple_from_string_and_list(string, lst):\n    return (string,) + tuple(lst)"
    ],
    "Write a function to calculate the perimeter of a regular polygon.": [
        "import math\n\ndef perimeter_of_polygon(num_sides, side_length):\n    return num_sides * side_length"
    ],
    "Write a python function to check whether every even index contains even numbers of a given list.": [
        "def check_even_indices(lst):\n    return all(lst[i] % 2 == 0 for i in range(0, len(lst), 2))"
    ],
    "Write a function to remove the nested record from the given tuple.": [
        "def remove_nested_record(input_tuple):\n    result = [item for item in input_tuple if not isinstance(item, tuple)]\n    return tuple(result)\n\n# Example usage:\ninput_tuple = (1, (2, 3), 4, (5, 6), 7)\noutput_tuple = remove_nested_record(input_tuple)\nprint(output_tuple)  # Output: (1, 4, 7)"
    ],
    "Write a python function to count the number of lists in a given number of lists.": [
        "def count_lists(n):\n    return n\n\n# Example usage:\n# print(count_lists(3))  # Output: 3"
    ],
    "Write a python function to find the last position of an element in a sorted array.": [
        "def find_last_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    ],
    "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.": [
        "import re\n\ndef match_string(s):\n    pattern = '^a.*b$'\n    return bool(re.match(pattern, s))"
    ],
    "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.": [
        "import heapq\n\ndef find_n_cheap_items(data, n):\n    return heapq.nsmallest(n, data)"
    ],
    "Write function to find the sum of all items in the given dictionary.": [
        "def sum_of_items(d):\n    return sum(d.values())"
    ],
    "Write a python function to find the sum of all odd natural numbers within the range l and r.": [
        "def sum_of_odd_numbers(l, r):\n    total_sum = 0\n    if l % 2 == 0:\n        l += 1\n    for i in range(l, r + 1, 2):\n        total_sum += i\n    return total_sum\n\n# Example usage:\n# print(sum_of_odd_numbers(3, 9))"
    ],
    "Write a python function to find the sum of an array.": [
        "def sum_array(arr):\n    return sum(arr)"
    ],
    "Write a python function to left rotate the bits of a given number.": [
        "def left_rotate_bits(num, bits, n):\n    return ((num << bits) | (num >> (n - bits))) & ((1 << n) - 1)"
    ],
    "Write a function to remove all whitespaces from a string.": [
        "def remove_whitespace(s):\n    return s.replace(\" \", \"\")"
    ],
    "Write a python function to count the number of equal numbers from three given integers.": [
        "def count_equal_numbers(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"
    ],
    "Write a python function to count the number of rotations required to generate a sorted array.": [
        "def count_rotations(arr):\n    n = len(arr)\n    low, high = 0, n - 1\n    \n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        \n        mid = (low + high) // 2\n        next_index = (mid + 1) % n\n        prev_index = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return 0"
    ],
    "Write a python function to check whether the given number is a perfect square or not.": [
        "import math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    root = math.isqrt(num)\n    return root * root == num"
    ],
    "Write a python function to check whether the product of numbers is even or not.": [
        "def is_product_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return True\n    return False\n\n# Example usage:\nnumbers = [3, 5, 7]\nprint(is_product_even(numbers))  # Output: False\n\nnumbers = [3, 5, 8]\nprint(is_product_even(numbers))  # Output: True"
    ],
    "Write a function to find the list in a list of lists whose sum of elements is the highest.": [
        "def find_list_with_highest_sum(list_of_lists):\n    if not list_of_lists:\n        return None\n    max_sum = float('-inf')\n    max_list = []\n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, -2, 3]]\nresult = find_list_with_highest_sum(list_of_lists)\nprint(result)  # Output: [4, 5, 6]"
    ],
    "Write a function to find maximum run of uppercase characters in the given string.": [
        "def max_uppercase_run(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"
    ],
    "Write a python function to find the first odd number in a given list of numbers.": [
        "def first_odd_number(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None"
    ],
    "Write a function to check if the given tuples contain the k or not.": [
        "def contains_k(tuples, k):\n    return any(k in t for t in tuples)"
    ],
    "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.": [
        "def check_elements(tuple1, tuple2):\n    return all(x > y for x, y in zip(tuple1, tuple2))"
    ],
    "Write a function to iterate over elements repeating each as many times as its count.": [
        "def repeat_elements(elements):\n    result = []\n    for element, count in elements.items():\n        result.extend([element] * count)\n    return result"
    ],
    "Write a function to check if two lists of tuples are identical or not.": [
        "def are_tuples_identical(list1, list2):\n    return list1 == list2"
    ],
    "Write a function to abbreviate 'road' as 'rd.' in a given string.": [
        "def abbreviate_road(input_string):\n    return input_string.replace('road', 'rd.')"
    ],
    "Write a function to find length of the string.": [
        "def string_length(s):\n    return len(s)"
    ],
    "Write a function to find the area of a rombus.": [
        "def area_of_rhombus(diagonal1, diagonal2):\n    return 0.5 * diagonal1 * diagonal2"
    ],
    "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.": [
        "def sort_array(arr):\n    count_0 = arr.count(0)\n    count_1 = arr.count(1)\n    count_2 = arr.count(2)\n    \n    sorted_arr = [0] * count_0 + [1] * count_1 + [2] * count_2\n    return sorted_arr"
    ],
    "Write a function to clear the values of the given tuples.": [
        "def clear_tuple_values(tuples_list):\n    return [tuple() for _ in tuples_list]"
    ],
    "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.": [
        "def find_divisible_by_m_or_n(numbers, m, n):\n    return list(filter(lambda x: (x % m == 0 or x % n == 0), numbers))"
    ],
    "Write a python function to count lower case letters in a given string.": [
        "def count_lower_case_letters(s):\n    return sum(1 for c in s if c.islower())"
    ],
    "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.": [
        "def count_consecutive_duplicates(nums):\n    if not nums:\n        return []\n    \n    result = []\n    count = 1\n    \n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            result.append((nums[i - 1], count))\n            count = 1\n    \n    result.append((nums[-1], count))\n    return result"
    ],
    "Write a function to check whether the given month number contains 28 days or not.": [
        "def has_28_days(month_number):\n    return month_number == 2"
    ],
    "Write a function to merge two dictionaries into a single expression.": [
        "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}"
    ],
    "Write a function to return true if the password is valid.": [
        "def is_valid_password(password):\n    if len(password) < 8:\n        return False\n    has_upper = False\n    has_lower = False\n    has_digit = False\n    has_special = False\n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n        else:\n            has_special = True\n    return has_upper and has_lower and has_digit and has_special"
    ],
    "Write a function to check if the given string starts with a substring using regex.": [
        "import re\n\ndef starts_with_substring(s, substring):\n    pattern = r'^' + re.escape(substring)\n    return re.match(pattern, s) is not None"
    ],
    "Write a python function to remove even numbers from a given list.": [
        "def remove_even_numbers(lst):\n    return [num for num in lst if num % 2 != 0]"
    ],
    "Write a python function to access multiple elements of specified index from a given list.": [
        "def access_elements(lst, indices):\n    return [lst[i] for i in indices]"
    ],
    "Write a python function to find the type of triangle from the given sides.": [
        "def triangle_type(a, b, c):\n    if a == b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or a == c:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\""
    ],
    "Write a function to sum a specific column of a list in a given list of lists.": [
        "def sum_column(matrix, column_index):\n    return sum(row[column_index] for row in matrix)"
    ],
    "Write a function to count alphabets,digits and special charactes in a given string.": [
        "def count_characters(s):\n    alpha_count = 0\n    digit_count = 0\n    special_count = 0\n    \n    for char in s:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        else:\n            special_count += 1\n            \n    return alpha_count, digit_count, special_count\n\n# Example usage:\n# result = count_characters(\"Hello World! 123\")\n# print(result)  # Output: (10, 3, 3)"
    ],
    "Write a function to find out the second most repeated (or frequent) string in the given sequence.": [
        "from collections import Counter\n\ndef second_most_repeated(sequence):\n    count = Counter(sequence)\n    if len(count) < 2:\n        return None\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_count[1][0]\n\n# Example usage:\nsequence = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\nprint(second_most_repeated(sequence))  # Output: \"apple\""
    ],
    "Write a function to round up a number to specific digits.": [
        "import math\n\ndef round_up(number, digits):\n    factor = 10 ** digits\n    return math.ceil(number / factor) * factor"
    ],
    "Write a python function to count equal element pairs from the given array.": [
        "def count_equal_pairs(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"
    ],
    "Write a function to extract the maximum numeric value from a string by using regex.": [
        "import re\n\ndef extract_max_number(s):\n    numbers = map(int, re.findall(r'\\d+', s))\n    return max(numbers, default=None)"
    ],
    "Write a function to get dictionary keys as a list.": [
        "def get_keys_as_list(dictionary):\n    return list(dictionary.keys())"
    ],
    "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.": [
        "def generate_spiral_matrix(n):\n    if n <= 0:\n        return []\n\n    # Initialize the matrix with zeros\n    matrix = [[0] * n for _ in range(n)]\n    \n    # Define the boundaries of the spiral\n    top, bottom = 0, n - 1\n    left, right = 0, n - 1\n    \n    num = 1  # Start filling from number 1^2\n    \n    while top <= bottom and left <= right:\n        # Fill the top row\n        for i in range(left, right + 1):\n            matrix[top][i] = num ** 2\n            num += 1\n        top += 1\n        \n        # Fill the right column\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num ** 2\n            num += 1\n        right -= 1\n        \n        if top <= bottom:\n            # Fill the bottom row\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num ** 2\n                num += 1\n            bottom -= 1\n        \n        if left <= right:\n            # Fill the left column\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num ** 2\n                num += 1\n            left += 1\n    \n    return matrix"
    ],
    "Write a python function to find the slope of a line.": [
        "def find_slope(x1, y1, x2, y2):\n    return (y2 - y1) / (x2 - x1)"
    ],
    "Write a function to find length of the subarray having maximum sum.": [
        "def max_subarray_length(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n    \n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n        \n        if current_sum < 0:\n            current_sum = 0\n            temp_start = i + 1\n    \n    return end - start + 1\n\n# Example usage:\n# arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n# print(max_subarray_length(arr))  # Output: 4"
    ],
    "Write a python function to find the cube sum of first n odd natural numbers.": [
        "def cube_sum_of_first_n_odd_numbers(n):\n    total_sum = 0\n    for i in range(n):\n        total_sum += (2 * i + 1) ** 3\n    return total_sum"
    ],
    "Write a python function to find minimum number swaps required to make two binary strings equal.": [
        "def min_swaps_to_equal(str1, str2):\n    if len(str1) != len(str2):\n        return -1\n    \n    mismatches = []\n    \n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            mismatches.append(i)\n    \n    if len(mismatches) % 2 != 0:\n        return -1\n    \n    swaps = 0\n    for i in range(0, len(mismatches), 2):\n        if str1[mismatches[i]] == '0':\n            swaps += 1\n    \n    return swaps"
    ],
    "Write a function to sort the tuples alphabetically by the first item of each tuple.": [
        "def sort_tuples_by_first_item(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[0])"
    ],
    "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.": [
        "def are_roots_opposite_in_sign(a, b, c):\n    return b == 0"
    ],
    "Write a function to count the number of inversions in the given array.": [
        "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n    \n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i...mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n    \n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    \n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        \n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    \n    return inv_count\n\ndef count_inversions(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr)-1)\n\n# Example usage:\n# arr = [1, 20, 6, 4, 5]\n# print(\"Number of inversions are\", count_inversions(arr))"
    ],
    "Write a function to find the number which occurs for odd number of times in the given array.": [
        "def find_odd_occurrence(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result"
    ],
    "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.": [
        "import heapq\n\ndef nthSuperUglyNumber(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]"
    ],
    "Write a python function to find the kth element in an array containing odd elements first and then even elements.": [
        "def find_kth_element(arr, k):\n    # Separate odd and even elements\n    odds = [x for x in arr if x % 2 != 0]\n    evens = [x for x in arr if x % 2 == 0]\n    \n    # Check if kth element is in odd part\n    if k <= len(odds):\n        return odds[k-1]\n    else:\n        # If not, find in even part\n        return evens[k-len(odds)-1]\n\n# Example usage:\narr = [1, 3, 5, 2, 4, 6]\nk = 4\nprint(find_kth_element(arr, k))  # Output: 2"
    ],
    "Write a python function to count the number of digits in factorial of a given number.": [
        "def factorial_digit_count(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    \n    return len(str(factorial))\n\n# Example usage:\n# print(factorial_digit_count(5))  # Output: 3"
    ],
    "Write a function to find the minimum number of platforms required for a railway/bus station.": [
        "def find_platform(arr, dep):\n    arr.sort()\n    dep.sort()\n    \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    \n    while i < len(arr) and j < len(dep):\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    \n    return result"
    ],
    "Write a python function to copy a list from a singleton tuple.": [
        "def copy_list_from_singleton_tuple(singleton_tuple):\n    if len(singleton_tuple) != 1:\n        raise ValueError(\"The input must be a singleton tuple.\")\n    return list(singleton_tuple[0])"
    ],
    "Write a function to find the area of a trapezium.": [
        "def trapezium_area(base1, base2, height):\n    return 0.5 * (base1 + base2) * height"
    ],
    "Write a python function to find sum of all prime divisors of a given number.": [
        "def sum_of_prime_divisors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    prime_sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            prime_sum += i\n    return prime_sum"
    ],
    "Write a function to check if a triangle of positive area is possible with the given angles.": [
        "def is_valid_triangle(a, b, c):\n    return a > 0 and b > 0 and c > 0 and a + b + c == 180"
    ],
    "Write a python function to find sum of inverse of divisors.": [
        "def sum_of_inverse_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += 1 / i\n    return total\n\n# Example usage:\n# print(sum_of_inverse_divisors(12))"
    ],
    "Write a python function to remove negative numbers from a list.": [
        "def remove_negative_numbers(lst):\n    return [num for num in lst if num >= 0]"
    ],
    "Write a python function to find sum of odd factors of a number.": [
        "def sum_odd_factors(n):\n    res = 1\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n //= i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res"
    ],
    "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.": [
        "import heapq\n\ndef list_to_heap(input_list):\n    heapq.heapify(input_list)\n    return input_list"
    ],
    "Write a python function to check for even parity of a given number.": [
        "def even_parity(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count % 2 == 0"
    ],
    "Write a python function to find minimum adjacent swaps required to sort binary array.": [
        "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arr_pos = [(value, index) for index, value in enumerate(arr)]\n    arr_pos.sort()\n    \n    visited = [False] * n\n    swaps = 0\n    \n    for i in range(n):\n        if visited[i] or arr_pos[i][1] == i:\n            continue\n        \n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = arr_pos[j][1]\n            cycle_size += 1\n        \n        if cycle_size > 0:\n            swaps += (cycle_size - 1)\n    \n    return swaps"
    ],
    "Write a function to list out the list of given strings individually using map function.": [
        "def list_strings(strings):\n    return list(map(lambda s: s, strings))\n\n# Example usage:\nstrings = [\"apple\", \"banana\", \"cherry\"]\nprint(list_strings(strings))"
    ],
    "Write a function to count number of lists in a given list of lists and square the count.": [
        "def count_and_square_lists(list_of_lists):\n    return len(list_of_lists) ** 2"
    ],
    "Write a function to generate all sublists of a given list.": [
        "def generate_sublists(lst):\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n# Example usage:\n# lst = [1, 2, 3]\n# print(generate_sublists(lst))"
    ],
    "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.": [
        "import re\n\ndef is_ending_with_alphanumeric(s):\n    return bool(re.search(r'\\w$', s))"
    ],
    "Write a function to find all anagrams of a string in a given list of strings using lambda function.": [
        "def find_anagrams(s, words):\n    return list(filter(lambda word: sorted(word) == sorted(s), words))"
    ],
    "Write a function to find the occurrences of n most common words in a given text.": [
        "from collections import Counter\nimport re\n\ndef n_most_common_words(text, n):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    word_counts = Counter(words)\n    return word_counts.most_common(n)"
    ],
    "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.": [
        "def longest_consecutive_subsequence(nums):\n    if not nums:\n        return 0\n\n    num_set = set(nums)\n    longest_streak = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak"
    ],
    "Write a function to find palindromes in a given list of strings using lambda function.": [
        "def find_palindromes(strings):\n    return list(filter(lambda s: s == s[::-1], strings))"
    ],
    "Write a function to print n-times a list using map function.": [
        "def print_n_times(lst, n):\n    list(map(lambda x: print(lst), range(n)))"
    ],
    "Write a function to check whether the given month name contains 31 days or not.": [
        "def has_31_days(month):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months_with_31_days"
    ],
    "Write a python function to add a minimum number such that the sum of array becomes even.": [
        "def make_sum_even(arr):\n    total_sum = sum(arr)\n    if total_sum % 2 == 0:\n        return 0\n    else:\n        return 1"
    ],
    "Write a python function to find the length of the last word in a given string.": [
        "def length_of_last_word(s: str) -> int:\n    s = s.strip()\n    if not s:\n        return 0\n    return len(s.split(' ')[-1])"
    ],
    "Write a function to remove sublists from a given list of lists, which are outside a given range.": [
        "def filter_sublists_by_range(list_of_lists, min_value, max_value):\n    return [sublist for sublist in list_of_lists if all(min_value <= x <= max_value for x in sublist)]"
    ],
    "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.": [
        "def sum_positive_numbers(numbers):\n    return sum(filter(lambda x: x > 0, numbers))"
    ],
    "Write a python function to check whether the given strings are rotations of each other or not.": [
        "def are_rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp"
    ],
    "Write a function to check if a nested list is a subset of another nested list.": [
        "def is_subset(list1, list2):\n    set1 = set(tuple(x) for x in list1)\n    set2 = set(tuple(x) for x in list2)\n    return set1.issubset(set2)\n\n# Example usage:\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 4], [5, 6]]\nprint(is_subset(list1, list2))  # Output: True\n\nlist3 = [[1, 2], [7, 8]]\nprint(is_subset(list3, list2))  # Output: False"
    ],
    "Write a function to solve the fibonacci sequence using recursion.": [
        "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"
    ],
    "Write a python function to check if the string is a concatenation of another string.": [
        "def is_concatenation(s1, s2):\n    return s1 + s1 == s2 * 2 or s2 + s2 == s1 * 2\n\n# Example usage:\ns1 = \"abc\"\ns2 = \"abcabc\"\nprint(is_concatenation(s1, s2))  # Output: True\n\ns1 = \"abc\"\ns2 = \"abcd\"\nprint(is_concatenation(s1, s2))  # Output: False"
    ],
    "Write a function to find the minimum difference in the tuple pairs of given tuples.": [
        "def min_difference_in_pairs(tuples_list):\n    return min(abs(x - y) for x, y in tuples_list)"
    ],
    "Write a python function to find lcm of two positive integers.": [
        "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)"
    ],
    "Write a python function to sort the given string.": [
        "def sort_string(s):\n    return ''.join(sorted(s))"
    ],
    "Write a function to check if the given tuple contains only k elements.": [
        "def has_k_elements(input_tuple, k):\n    return len(input_tuple) == k"
    ],
    "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.": [
        "import re\n\ndef match_string(s):\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, s))"
    ],
    "Write a python function to find number of solutions in quadratic equation.": [
        "def count_solutions(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return 2\n    elif discriminant == 0:\n        return 1\n    else:\n        return 0"
    ],
    "Write a function to find the sum of first even and odd number of a given list.": [
        "def sum_first_even_odd(numbers):\n    even_sum = None\n    odd_sum = None\n    \n    for num in numbers:\n        if num % 2 == 0 and even_sum is None:\n            even_sum = num\n        elif num % 2 != 0 and odd_sum is None:\n            odd_sum = num\n        \n        if even_sum is not None and odd_sum is not None:\n            break\n    \n    return even_sum, odd_sum\n\n# Example usage:\nnumbers = [5, 3, 2, 8, 1, 4]\neven_sum, odd_sum = sum_first_even_odd(numbers)\nprint(\"Sum of first even number:\", even_sum)\nprint(\"Sum of first odd number:\", odd_sum)"
    ],
    "Write a function to caluclate perimeter of a parallelogram.": [
        "def perimeter_of_parallelogram(base, side):\n    return 2 * (base + side)"
    ],
    "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.": [
        "def find_divisible(numbers, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))"
    ],
    "Write a python function to check whether all the bits are within a given range or not.": [
        "def check_bits_in_range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & num) == num"
    ],
    "Write a python function to check whether the two given strings are isomorphic to each other or not.": [
        "def are_isomorphic(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    char_map = {}\n    seen_values = set()\n    \n    for c1, c2 in zip(s1, s2):\n        if c1 in char_map:\n            if char_map[c1] != c2:\n                return False\n        else:\n            if c2 in seen_values:\n                return False\n            char_map[c1] = c2\n            seen_values.add(c2)\n    \n    return True"
    ],
    "Write a function to add all the numbers in a list and divide it with the length of the list.": [
        "def average_of_list(numbers):\n    return sum(numbers) / len(numbers)"
    ],
    "Write a python function to check whether the given number is odd or not using bitwise operator.": [
        "def is_odd(n):\n    return n & 1 != 0"
    ],
    "Write a function to substract the elements of the given nested tuples.": [
        "def subtract_nested_tuples(tup1, tup2):\n    if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n        return tuple(subtract_nested_tuples(a, b) for a, b in zip(tup1, tup2))\n    else:\n        return tup1 - tup2\n\n# Example usage:\ntup1 = ((5, 6), (7, 8))\ntup2 = ((3, 4), (2, 1))\nresult = subtract_nested_tuples(tup1, tup2)\nprint(result)  # Output: ((2, 2), (5, 7))"
    ],
    "Write a function to reverse each list in a given list of lists.": [
        "def reverse_each_list(list_of_lists):\n    return [lst[::-1] for lst in list_of_lists]"
    ],
    "Write a python function to find the index of an extra element present in one sorted array.": [
        "def find_extra_element(arr1, arr2):\n    left, right = 0, len(arr2) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    ],
    "Write a python function to check whether the given two numbers have same number of digits or not.": [
        "def have_same_number_of_digits(num1, num2):\n    return len(str(abs(num1))) == len(str(abs(num2)))"
    ],
    "Write a function to remove multiple spaces in a string.": [
        "def remove_multiple_spaces(input_string):\n    return ' '.join(input_string.split())"
    ],
    "Write a python function to get the last element of each sublist.": [
        "def get_last_elements(list_of_lists):\n    return [sublist[-1] for sublist in list_of_lists if sublist]"
    ],
    "Write a function to convert the given string of float type into tuple.": [
        "def string_to_tuple(s):\n    return tuple(float(x) for x in s.split(','))"
    ],
    "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.": [
        "def max_sum_non_adjacent(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    incl = max(arr[0], arr[1])\n    excl = 0\n    \n    for i in range(2, len(arr)):\n        excl_new = max(excl, incl)\n        incl = excl + arr[i]\n        excl = excl_new\n    \n    return max(excl, incl)"
    ],
    "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.": [
        "def last(n):\n    return n[-1]\n\ndef sort_list_tuples(tuples):\n    return sorted(tuples, key=last)"
    ],
    "Write a python function to check whether the word is present in a given sentence or not.": [
        "def is_word_in_sentence(word, sentence):\n    return word.lower() in sentence.lower()"
    ],
    "Write a function to extract specified number of elements from a given list, which follow each other continuously.": [
        "def extract_continuous_elements(lst, num_elements):\n    result = []\n    if len(lst) < num_elements:\n        return result\n    \n    max_sum = sum(lst[:num_elements])\n    current_sum = max_sum\n    start_index = 0\n    \n    for i in range(num_elements, len(lst)):\n        current_sum += lst[i] - lst[i - num_elements]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - num_elements + 1\n    \n    result = lst[start_index:start_index + num_elements]\n    return result"
    ],
    "Write a python function to check whether an array can be sorted or not by picking only the corner elements.": [
        "def can_sort_by_corners(arr):\n    n = len(arr)\n    if n <= 2:\n        return True\n    \n    increasing = arr[1] > arr[0]\n    \n    for i in range(1, n - 1):\n        if increasing and arr[i + 1] < arr[i]:\n            increasing = False\n        elif not increasing and arr[i + 1] > arr[i]:\n            increasing = True\n    \n    return arr[-1] >= arr[-2] if increasing else arr[-1] <= arr[-2]"
    ],
    "Write a function where a string will start with a specific number.": [
        "def starts_with_number(s, number):\n    return s.startswith(str(number))"
    ],
    "Write a function to find the smallest multiple of the first n numbers.": [
        "import math\n\ndef smallest_multiple(n):\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) // math.gcd(result, i)\n    return result"
    ],
    "Write a function to combine two dictionaries by adding values for common keys.": [
        "def combine_dictionaries(dict1, dict2):\n    combined = dict1.copy()\n    for key, value in dict2.items():\n        if key in combined:\n            combined[key] += value\n        else:\n            combined[key] = value\n    return combined"
    ],
    "Write a python function to count the total unset bits from 1 to n.": [
        "def count_unset_bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        num = i\n        while num:\n            if num % 2 == 0:\n                count += 1\n            num //= 2\n    return count"
    ],
    "Write a function to return true if the given number is even else return false.": [
        "def is_even(number):\n    return number % 2 == 0"
    ],
    "Write a python function to find the sum of squares of binomial co-efficients.": [
        "def sum_of_squares_binomial_coeffs(n):\n    def binomial_coeff(n, k):\n        if k == 0 or k == n:\n            return 1\n        res = 1\n        for i in range(k):\n            res *= (n - i)\n            res //= (i + 1)\n        return res\n    \n    total_sum = 0\n    for k in range(n + 1):\n        total_sum += binomial_coeff(n, k) ** 2\n    return total_sum\n\n# Example usage:\nn = 5\nprint(sum_of_squares_binomial_coeffs(n))  # Output: 252"
    ],
    "Write a function to extract year, month and date from a url by using regex.": [
        "import re\n\ndef extract_date_from_url(url):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, url)\n    if match:\n        year, month, day = match.groups()\n        return int(year), int(month), int(day)\n    else:\n        return None"
    ],
    "Write a function to print the first n lucky numbers.": [
        "def print_lucky_numbers(n):\n    lucky_numbers = []\n    i = 1\n    while len(lucky_numbers) < n:\n        if all(i % j != 0 for j in lucky_numbers):\n            lucky_numbers.append(i)\n        i += 1\n    for num in lucky_numbers:\n        print(num)\n\n# Example usage:\nprint_lucky_numbers(10)"
    ],
    "Write a function to find the fixed point in the given array.": [
        "def find_fixed_point(arr):\n    for i in range(len(arr)):\n        if arr[i] == i:\n            return i\n    return -1"
    ],
    "Write a function to find the previous palindrome of a specified number.": [
        "def previous_palindrome(n):\n    n -= 1\n    while str(n) != str(n)[::-1]:\n        n -= 1\n    return n"
    ],
    "Write a function to validate a gregorian date.": [
        "import datetime\n\ndef is_valid_gregorian_date(year, month, day):\n    try:\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False"
    ],
    "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.": [
        "import heapq\n\ndef max_product_of_three(nums):\n    # Find the three largest numbers\n    largest_three = heapq.nlargest(3, nums)\n    # Find the two smallest numbers\n    smallest_two = heapq.nsmallest(2, nums)\n    \n    # The maximum product can be either:\n    # 1. Product of the three largest numbers\n    # 2. Product of the two smallest numbers (which could be negative) and the largest number\n    return max(largest_three[0] * largest_three[1] * largest_three[2], \n               smallest_two[0] * smallest_two[1] * largest_three[0])"
    ],
    "Write a function to find ln, m lobb number.": [
        "def binomial_coefficient(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\ndef loeb_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if m >= n or m < 0:\n        return 0\n    return binomial_coefficient(2 * n, n - m) - binomial_coefficient(2 * n, n - m - 1)"
    ],
    "Write a function to check for a number at the end of a string.": [
        "import re\n\ndef has_number_at_end(s):\n    return bool(re.search(r'\\d$', s))"
    ],
    "Write a python function to check whether the given string is made up of two alternating characters or not.": [
        "def is_alternating(s):\n    if len(s) < 2:\n        return False\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            return False\n    return True"
    ],
    "Write a function to rearrange positive and negative numbers in a given array using lambda function.": [
        "def rearrange_array(arr):\n    return sorted(arr, key=lambda x: (x < 0, x))\n\n# Example usage:\narr = [10, -1, 20, -2, 30, -3]\nresult = rearrange_array(arr)\nprint(result)"
    ],
    "Write a function to find if there is a triplet in the array whose sum is equal to a given value.": [
        "def has_triplet_with_sum(arr, target_sum):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return True\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False"
    ],
    "Write a function to find the sequences of one upper case letter followed by lower case letters.": [
        "import re\n\ndef find_sequences(text):\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches"
    ],
    "Write a function to count coin change.": [
        "def count_coin_change(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    \n    return dp[amount]"
    ],
    "Write a python function to multiply all items in the list.": [
        "def multiply_list(items):\n    product = 1\n    for x in items:\n        product *= x\n    return product"
    ],
    "Write a function to remove all tuples with all none values in the given tuple list.": [
        "def remove_tuples_with_all_none(tuple_list):\n    return [t for t in tuple_list if not all(x is None for x in t)]"
    ],
    "Write a function to perform chunking of tuples each of size n.": [
        "def chunk_tuples(data, n):\n    return [data[i:i+n] for i in range(0, len(data), n)]"
    ],
    "Write a function to find a pair with the highest product from a given array of integers.": [
        "def max_product_pair(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    n = len(arr)\n    return arr[0] * arr[1], arr[n-1] * arr[n-2]\n\n# Example usage:\narr = [1, 4, 3, 6, 7, 0]\nresult = max_product_pair(arr)\nprint(result)  # Output: (0, 42)"
    ],
    "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.": [
        "def shortest_common_supersequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n\n    return dp[m][n]"
    ],
    "Write a function to find maximum of two numbers.": [
        "def find_maximum(a, b):\n    return max(a, b)"
    ],
    "Write a python function to calculate the product of all the numbers of a given tuple.": [
        "def product_of_tuple(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product"
    ],
    "Write a function to find n-th rencontres number.": [
        "def rencontres_number(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return round((n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)))\n    else:\n        return round(rencontres_number(n - 1, k - 1) - (n - 1) * rencontres_number(n - 1, k))"
    ],
    "Write a function to calculate the height of the given binary tree.": [
        "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef height_of_binary_tree(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height_of_binary_tree(root.left)\n        right_height = height_of_binary_tree(root.right)\n        return max(left_height, right_height) + 1"
    ],
    "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.": [
        "def convert_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\""
    ],
    "Write a function to count repeated items of a tuple.": [
        "def count_repeated_items(tup):\n    item_count = {}\n    for item in tup:\n        if item in item_count:\n            item_count[item] += 1\n        else:\n            item_count[item] = 1\n    repeated_items = {item: count for item, count in item_count.items() if count > 1}\n    return repeated_items\n\n# Example usage:\nexample_tuple = (1, 2, 3, 4, 5, 2, 3, 6, 7, 3, 8)\nprint(count_repeated_items(example_tuple))\n\n\nThis code defines a function `count_repeated_items` that takes a tuple as input and returns a dictionary containing the repeated items and their counts."
    ],
    "Write a function that matches a string that has an a followed by zero or more b's by using regex.": [
        "import re\n\ndef match_ab(string):\n    pattern = r'ab*'\n    return bool(re.match(pattern, string))\n\n# Example usage:\nprint(match_ab(\"a\"))    # True\nprint(match_ab(\"ab\"))   # True\nprint(match_ab(\"abb\"))  # True\nprint(match_ab(\"ac\"))   # False"
    ],
    "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.": [
        "def sum_of_series(n):\n    return sum([i**3 for i in range(1, n+1)])\n\n# Example usage:\n# result = sum_of_series(4)\n# print(result)  # Output: 100"
    ],
    "Write a function to remove duplicate words from a given list of strings.": [
        "def remove_duplicate_words(words):\n    return list(dict.fromkeys(words))"
    ],
    "Write a function to convert camel case string to snake case string by using regex.": [
        "import re\n\ndef camel_to_snake(s):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower()"
    ],
    "Write a function to find the nth delannoy number.": [
        "def delannoy_number(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return delannoy_number(n-1, m) + delannoy_number(n, m-1) + delannoy_number(n-1, m-1)\n\ndef nth_delannoy(n):\n    return delannoy_number(n, n)"
    ],
    "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.": [
        "def sum_of_series(n):\n    return n * (n + 1) * (2 * n + 1) // 6"
    ],
    "Write a function to re-arrange the given tuples based on the given ordered list.": [
        "def rearrange_tuples(tuples_list, order_list):\n    return [tuple(item[order_list.index(i)] for i in order_list) for item in tuples_list]"
    ],
    "Write a function to count the most common character in a given string.": [
        "from collections import Counter\n\ndef most_common_character(s):\n    counter = Counter(s)\n    most_common_char, _ = counter.most_common(1)[0]\n    return most_common_char"
    ],
    "Write a function to find three closest elements from three sorted arrays.": [
        "def find_three_closest(arr1, arr2, arr3):\n    i, j, k = 0, 0, 0\n    min_diff = float('inf')\n    closest_sum = 0\n\n    while i < len(arr1) and j < len(arr2) and k < len(arr3):\n        maximum = max(arr1[i], arr2[j], arr3[k])\n        minimum = min(arr1[i], arr2[j], arr3[k])\n\n        diff = maximum - minimum\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_sum = arr1[i] + arr2[j] + arr3[k]\n\n        if min_diff == 0:\n            break\n\n        if diff == maximum - arr2[j]:\n            j += 1\n        elif diff == maximum - arr3[k]:\n            k += 1\n        else:\n            i += 1\n\n    return arr1[i-1], arr2[j-1], arr3[k-1]"
    ],
    "Write a function to sort a list of dictionaries using lambda function.": [
        "def sort_dicts_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda x: x[key])"
    ],
    "Write a function to sort the given array by using heap sort.": [
        "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < n and arr[i] < arr[l]:\n        largest = l\n    \n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    \n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n# Example usage:\n# arr = [12, 11, 13, 5, 6, 7]\n# heap_sort(arr)\n# print(\"Sorted array is:\", arr)"
    ],
    "Write a function to count the elements in a list until an element is a tuple.": [
        "def count_elements_until_tuple(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"
    ],
    "Write a function to check if any list element is present in the given list.": [
        "def is_element_present(lst):\n    for element in lst:\n        if element in lst:\n            return True\n    return False"
    ],
    "Write a function to combine two given sorted lists using heapq module.": [
        "import heapq\n\ndef combine_sorted_lists(list1, list2):\n    return list(heapq.merge(list1, list2))"
    ],
    "Write a function to separate and print the numbers and their position of a given string.": [
        "import re\n\ndef find_numbers_with_positions(input_string):\n    # Find all occurrences of numbers in the string with their positions\n    matches = re.finditer(r'\\d+', input_string)\n    \n    for match in matches:\n        number = match.group()\n        position = match.start()\n        print(f\"Number: {number}, Position: {position}\")\n\n# Example usage\ninput_str = \"Hello123, this is a test456 string with789 numbers.\"\nfind_numbers_with_positions(input_str)"
    ],
    "Write a function to convert the given tuples into set.": [
        "def tuples_to_set(tuples):\n    return set(tuples)"
    ],
    "Write a function to find the most common elements and their counts of a specified text.": [
        "from collections import Counter\n\ndef most_common_elements(text):\n    # Split the text into words\n    words = text.split()\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    # Find the most common words and their counts\n    most_common = word_counts.most_common()\n    return most_common\n\n# Example usage\ntext = \"apple banana apple orange banana apple\"\nprint(most_common_elements(text))"
    ],
    "Write a python function to find the length of the shortest word.": [
        "def shortest_word_length(sentence):\n    words = sentence.split()\n    if not words:\n        return 0\n    min_length = float('inf')\n    for word in words:\n        if len(word) < min_length:\n            min_length = len(word)\n    return min_length"
    ],
    "Write a function to get an item of a tuple.": [
        "def get_tuple_item(tup, index):\n    return tup[index]"
    ],
    "Write a function to sort the given tuple list basis the total digits in tuple.": [
        "def sort_tuple_list_by_digits(tuples_list):\n    return sorted(tuples_list, key=lambda x: sum(len(str(item)) for item in x))\n\n# Example usage:\n# tuples_list = [(12, 34), (567, 89), (2345, 6)]\n# sorted_list = sort_tuple_list_by_digits(tuples_list)\n# print(sorted_list)"
    ],
    "Write a function to display sign of the chinese zodiac for given year.": [
        "def chinese_zodiac(year):\n    animals = [\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"]\n    return animals[(year - 1900) % 12]\n\n# Example usage:\nyear = 2023\nprint(f\"The sign of the Chinese zodiac for the year {year} is {chinese_zodiac(year)}.\")"
    ],
    "Write a function to find the maximum of similar indices in two lists of tuples.": [
        "def max_similar_indices(list1, list2):\n    return [(max(t1[0], t2[0]), max(t1[1], t2[1])) for t1, t2 in zip(list1, list2)]"
    ],
    "Write a function to compute the value of ncr mod p.": [
        "def binomial_coefficient_mod(n, k, p):\n    if k > n:\n        return 0\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[k]"
    ],
    "Write a python function to find the minimun number of subsets with distinct elements.": [
        "def min_subsets_with_distinct_elements(arr):\n    from collections import Counter\n    element_counts = Counter(arr)\n    max_count = max(element_counts.values())\n    return max_count\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 5, 6, 6, 7]\nprint(min_subsets_with_distinct_elements(arr))  # Output: 2"
    ],
    "Write a function that gives profit amount if the given amount has profit else return none.": [
        "def calculate_profit(amount):\n    if amount > 0:\n        return amount\n    else:\n        return None"
    ],
    "Write a function to find out, if the given number is abundant.": [
        "def is_abundant(n):\n    divisors_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisors_sum > n"
    ],
    "Write a function to split the given string at uppercase letters by using regex.": [
        "import re\n\ndef split_at_uppercase(s):\n    return re.findall('[A-Z][^A-Z]*', s)"
    ],
    "Write a python function to get the position of rightmost set bit.": [
        "def get_rightmost_set_bit_position(n):\n    if n == 0:\n        return -1\n    return n & -n"
    ],
    "Write a function to convert an integer into a roman numeral.": [
        "def int_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_num"
    ],
    "Write a python function to find the average of a list.": [
        "def average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)"
    ],
    "Write a function to solve tiling problem.": [
        "def tile(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]"
    ],
    "Write a function to convert a roman numeral to an integer.": [
        "def roman_to_int(s: str) -> int:\n    roman_values = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    \n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        value = roman_values[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    \n    return total"
    ],
    "Write a python function to find the sum of all even natural numbers within the range l and r.": [
        "def sum_of_even_numbers(l, r):\n    sum_even = 0\n    for num in range(l, r + 1):\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even"
    ],
    "Write a function to calculate the discriminant value.": [
        "def calculate_discriminant(a, b, c):\n    return b**2 - 4*a*c"
    ],
    "Write a python function to check whether the length of the word is even or not.": [
        "def is_length_even(word):\n    return len(word) % 2 == 0"
    ],
    "Write a function to convert camel case string to snake case string.": [
        "def camel_to_snake(s):\n    return ''.join(['_' + i.lower() if i.isupper() else i for i in s]).lstrip('_')"
    ],
    "Write a function to remove an empty tuple from a list of tuples.": [
        "def remove_empty_tuples(tuples_list):\n    return [t for t in tuples_list if t]"
    ],
    "Write a python function to accept the strings which contains all vowels.": [
        "def has_all_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    return vowels <= set(s)"
    ],
    "Write a python function to find maximum possible value for the given periodic function.": [
        "import math\n\ndef max_periodic_function(A, B, C):\n    return A * math.floor(C / B) + B\n\n# Example usage:\nA = 3\nB = 4\nC = 10\nprint(max_periodic_function(A, B, C))  # Output: 8"
    ],
    "Write a function to join the tuples if they have similar initial elements.": [
        "def join_tuples(tuples_list):\n    result = {}\n    for t in tuples_list:\n        if t[0] not in result:\n            result[t[0]] = list(t)\n        else:\n            result[t[0]].extend(t[1:])\n    return [tuple(value) for value in result.values()]\n\n# Example usage:\ntuples_list = [(1, 2), (1, 3), (2, 4), (3, 5), (3, 6)]\nprint(join_tuples(tuples_list))"
    ],
    "Write a function to find minimum of two numbers.": [
        "def find_minimum(a, b):\n    return min(a, b)"
    ],
    "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.": [
        "def max_segments(n, a, b, c):\n    def dfs(length, count):\n        if length == 0:\n            return count\n        if length < 0:\n            return -1\n        result = max(dfs(length - a, count + 1), dfs(length - b, count + 1), dfs(length - c, count + 1))\n        return result if result != -1 else count\n    \n    return dfs(n, 0)"
    ],
    "Write a function to concatenate the given two tuples to a nested tuple.": [
        "def concatenate_to_nested_tuple(tuple1, tuple2):\n    return (tuple1, tuple2)\n\n# Example usage:\n# result = concatenate_to_nested_tuple((1, 2), (3, 4))\n# print(result)  # Output: ((1, 2), (3, 4))"
    ],
    "Write a python function to left rotate the string.": [
        "def left_rotate_string(s, d):\n    return s[d:] + s[:d]"
    ],
    "Write a function to find the minimum total path sum in the given triangle.": [
        "def minimumTotal(triangle):\n    if not triangle:\n        return 0\n    \n    # Start from the second to last row and move upwards\n    for row in range(len(triangle) - 2, -1, -1):\n        for col in range(len(triangle[row])):\n            # Update the current element with the minimum path sum\n            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])\n    \n    # The top element now contains the minimum total path sum\n    return triangle[0][0]"
    ],
    "Write a python function to remove first and last occurrence of a given character from the string.": [
        "def remove_first_and_last_occurrence(s, char):\n    # Remove first occurrence\n    first_occurrence_index = s.find(char)\n    if first_occurrence_index != -1:\n        s = s[:first_occurrence_index] + s[first_occurrence_index+1:]\n    \n    # Remove last occurrence\n    last_occurrence_index = s.rfind(char)\n    if last_occurrence_index != -1:\n        s = s[:last_occurrence_index] + s[last_occurrence_index+1:]\n    \n    return s\n\n# Example usage:\n# result = remove_first_and_last_occurrence(\"hello world\", \"l\")\n# print(result)  # Output: \"heo world\""
    ],
    "Write a function to sort a given matrix in ascending order according to the sum of its rows.": [
        "def sort_matrix_by_row_sum(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"
    ],
    "Write a function to count the most common words in a dictionary.": [
        "from collections import Counter\n\ndef count_most_common_words(dictionary):\n    word_counts = Counter(dictionary.lower().split())\n    most_common_words = word_counts.most_common()\n    return most_common_words"
    ],
    "Write a python function to find the volume of a triangular prism.": [
        "def triangular_prism_volume(base_length, base_height, prism_height):\n    return (base_length * base_height) / 2 * prism_height"
    ],
    "Write a function to split a string at lowercase letters.": [
        "import re\n\ndef split_at_lowercase(s):\n    return re.findall('[A-Z][^A-Z]*', s)"
    ],
    "Write a function to find sequences of lowercase letters joined with an underscore.": [
        "import re\n\ndef find_lowercase_sequences(text):\n    pattern = r'[a-z]+(_[a-z]+)+'\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"hello_world this_is_a_test example_with_multiple_words\"\nsequences = find_lowercase_sequences(text)\nprint(sequences)  # Output: ['hello_world', 'this_is_a_test', 'example_with_multiple_words']"
    ],
    "Write a function to find the perimeter of a square.": [
        "def square_perimeter(side_length):\n    return 4 * side_length"
    ],
    "Write a function to remove characters from the first string which are present in the second string.": [
        "def remove_characters(str1, str2):\n    return ''.join(char for char in str1 if char not in str2)"
    ],
    "Write a function to find whether a given array of integers contains any duplicate element.": [
        "def contains_duplicate(nums):\n    return len(nums) != len(set(nums))"
    ],
    "Write a function to check if the given number is woodball or not.": [
        "def is_woodball(number):\n    if number % 3 == 0 and '3' in str(number):\n        return True\n    return False"
    ],
    "Write a function to find m number of multiples of n.": [
        "def find_multiples(n, m):\n    return [i * n for i in range(1, m + 1)]"
    ],
    "Write a function to find the first duplicate element in a given array of integers.": [
        "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"
    ],
    "Write a python function to find the maximum sum of elements of list in a list of lists.": [
        "def max_sum_of_sublists(list_of_lists):\n    return max(sum(sublist) for sublist in list_of_lists)"
    ],
    "Write a function to convert the given binary number to its decimal equivalent.": [
        "def binary_to_decimal(binary):\n    return int(binary, 2)"
    ],
    "Write a python function to find the product of non-repeated elements in a given array.": [
        "def product_of_non_repeated_elements(arr):\n    from collections import Counter\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product"
    ],
    "Write a function to check if the given tuple list has all k elements.": [
        "def has_all_k_elements(tuple_list, k):\n    seen = set()\n    for tup in tuple_list:\n        seen.update(tup)\n        if len(seen) >= k:\n            return True\n    return False"
    ],
    "Write a python function to remove all digits from a list of strings.": [
        "def remove_digits_from_strings(string_list):\n    return [''.join(filter(lambda char: not char.isdigit(), s)) for s in string_list]"
    ],
    "Write a python function to find binomial co-efficient.": [
        "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)"
    ],
    "Write a python function to find the element occurring odd number of times.": [
        "def find_odd_occurrence(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result"
    ],
    "Write a python function to count all the substrings starting and ending with same characters.": [
        "def count_substrings_with_same_start_end(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count"
    ],
    "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.": [
        "import heapq\nfrom collections import defaultdict\n\ndef top_k_frequent(nums, k):\n    frequency = defaultdict(int)\n    \n    for num_list in nums:\n        for num in num_list:\n            frequency[num] += 1\n    \n    heap = [(freq, num) for num, freq in frequency.items()]\n    heapq.heapify(heap)\n    \n    return [heapq.heappop(heap)[1] for _ in range(k)][::-1]\n\n# Example usage:\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nk = 2\nprint(top_k_frequent(nums, k))  # Output: [3, 2]"
    ],
    "Write a python function to find the largest prime factor of a given number.": [
        "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"
    ],
    "Write a python function to convert a decimal number to binary number.": [
        "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return \"0\"\n    binary_number = \"\"\n    while decimal_number > 0:\n        remainder = decimal_number % 2\n        binary_number = str(remainder) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output: \"1010\""
    ],
    "Write a python function to find the missing number in a sorted array.": [
        "def find_missing_number(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(arr)\n    return total_sum - array_sum"
    ],
    "Write a function to find the n-th rectangular number.": [
        "def rectangular_number(n):\n    return n * (n + 1)"
    ],
    "Write a python function to find the nth digit in the proper fraction of two given numbers.": [
        "def nth_digit_in_fraction(numerator, denominator, n):\n    # Ensure the denominator is not zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero\")\n    \n    # Find the fractional part by performing the division\n    fractional_part = (numerator / denominator) - int(numerator / denominator)\n    \n    # Convert the fractional part to a string and remove the leading '0.'\n    fractional_str = str(fractional_part)[2:]\n    \n    # Check if n is greater than the length of the fractional part\n    if n > len(fractional_str):\n        return None  # The nth digit does not exist\n    \n    # Return the nth digit as an integer\n    return int(fractional_str[n-1])\n\n# Example usage:\n# print(nth_digit_in_fraction(1, 3, 4))  # Output: 3\n\n\nThis function calculates the nth digit in the fractional representation of the division of two numbers. It first checks if the denominator is zero to avoid division by zero errors. Then, it computes the fractional part of the division, converts it to a string, and extracts the nth digit. If the requested digit exceeds the length of the fractional part, it returns `None`."
    ],
    "Write a function to sort a given mixed list of integers and strings.": [
        "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n\n# Example usage:\nmixed_list = [3, 'banana', 1, 'apple', 2, 'cherry']\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)"
    ],
    "Write a function to find the division of first even and odd number of a given list.": [
        "def divide_first_even_odd(numbers):\n    first_even = next((num for num in numbers if num % 2 == 0), None)\n    first_odd = next((num for num in numbers if num % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even / first_odd\n    else:\n        return None\n\n# Example usage:\nnumbers = [5, 3, 8, 1, 4]\nresult = divide_first_even_odd(numbers)\nprint(result)  # Output: 2.6666666666666665"
    ],
    "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.": [
        "from collections import Counter\n\ndef can_rearrange(s: str) -> bool:\n    # Count the frequency of each character\n    freq = Counter(s)\n    \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Check if the maximum frequency condition is met\n    return max_freq <= (len(s) + 1) // 2\n\n# Example usage\nprint(can_rearrange(\"aab\"))  # Output: True\nprint(can_rearrange(\"aaab\"))  # Output: False"
    ],
    "Write a function to find frequency of the elements in a given list of lists using collections module.": [
        "from collections import Counter\n\ndef find_frequency(list_of_lists):\n    all_elements = [item for sublist in list_of_lists for item in sublist]\n    return Counter(all_elements)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [1, 2, 7], [1, 2, 3]]\nfrequency = find_frequency(list_of_lists)\nprint(frequency)"
    ],
    "Write a function to filter even numbers using lambda function.": [
        "def filter_even_numbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))"
    ],
    "Write a python function to find the sum of repeated elements in a given array.": [
        "def sum_of_repeated_elements(arr):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    \n    repeated_sum = 0\n    for num, count in element_count.items():\n        if count > 1:\n            repeated_sum += num * count\n    \n    return repeated_sum"
    ],
    "Write a function to find sequences of lowercase letters joined with an underscore using regex.": [
        "import re\n\ndef find_underscore_sequences(text):\n    pattern = r'[a-z]+(_[a-z]+)*'\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"hello_world this_is_a_test example\"\nsequences = find_underscore_sequences(text)\nprint(sequences)"
    ],
    "Write a function that matches a word at the beginning of a string.": [
        "import re\n\ndef match_word_at_beginning(text, word):\n    pattern = r'^' + re.escape(word)\n    return bool(re.match(pattern, text))"
    ],
    "Write a function to find the gcd of the given array elements.": [
        "from math import gcd\nfrom functools import reduce\n\ndef find_gcd(arr):\n    return reduce(gcd, arr)"
    ],
    "Write a python function to determine whether all the numbers are different from each other are not.": [
        "def all_numbers_different(numbers):\n    return len(numbers) == len(set(numbers))"
    ],
    "Write a python function to find the last digit when factorial of a divides factorial of b.": [
        "def last_digit_factorial_division(a, b):\n    if a == b:\n        return 1\n    if a > b:\n        return 0\n    count = 0\n    for i in range(a + 1, b + 1):\n        count += str(i).count('5')\n        while i % 2 == 0:\n            count -= 1\n            i //= 2\n    if count > 0:\n        return 0\n    else:\n        return 2 ** (-count) % 10"
    ],
    "Write a python function to set all odd bits of a given number.": [
        "def set_odd_bits(n):\n    mask = 0\n    position = 0\n    temp_n = n\n    \n    while temp_n > 0:\n        if position % 2 == 0:\n            mask |= (1 << position)\n        position += 1\n        temp_n >>= 1\n    \n    return n | mask"
    ],
    "Write a function to extract every first or specified element from a given two-dimensional list.": [
        "def extract_elements(matrix, n=1):\n    return [row[n-1] for row in matrix]"
    ],
    "Write a function to find the list with minimum length using lambda function.": [
        "def find_min_length_list(lists):\n    return min(lists, key=lambda x: len(x))"
    ],
    "Write a function to print check if the triangle is equilateral or not.": [
        "def is_equilateral_triangle(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")"
    ],
    "Write a function to caluclate area of a parallelogram.": [
        "def calculate_area_of_parallelogram(base, height):\n    return base * height"
    ],
    "Write a python function to check whether the first and last characters of a given string are equal or not.": [
        "def first_last_equal(s):\n    return s[0] == s[-1]"
    ],
    "Write a function to sort the given array by using counting sort.": [
        "def counting_sort(arr):\n    if not arr:\n        return []\n\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n\n    for num in arr:\n        count[num] += 1\n\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i] * cnt)\n\n    return sorted_arr"
    ],
    "Write a function to find t-nth term of geometric series.": [
        "def geometric_nth_term(a, r, n):\n    return a * (r ** (n - 1))"
    ],
    "Write a python function to check if a given number is one less than twice its reverse.": [
        "def is_one_less_than_twice_reverse(num):\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    reversed_num = int(reversed_num_str)\n    return num == 2 * reversed_num - 1\n\n# Test the function\nprint(is_one_less_than_twice_reverse(18))  # Output: True\nprint(is_one_less_than_twice_reverse(48))  # Output: False"
    ],
    "Write a python function to find the largest number that can be formed with the given digits.": [
        "def largest_number(digits):\n    from itertools import permutations\n    max_num = 0\n    for perm in permutations(digits):\n        num = int(''.join(map(str, perm)))\n        if num > max_num:\n            max_num = num\n    return max_num\n\n# Example usage:\ndigits = [3, 1, 4, 1]\nprint(largest_number(digits))  # Output: 4311"
    ],
    "Write a python function to check whether the given two integers have opposite sign or not.": [
        "def have_opposite_signs(x, y):\n    return (x ^ y) < 0"
    ],
    "Write a function to find the nth octagonal number.": [
        "def octagonal_number(n):\n    return n * (3 * n - 2)"
    ],
    "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.": [
        "def max_length_subsequence_with_diff(arr):\n    if not arr:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] == 1 or arr[i-1] - arr[i] == 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n\n    return max_length"
    ],
    "Write a python function to count number of substrings with the sum of digits equal to their length.": [
        "def count_substrings_with_digit_sum_equal_length(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n    return count"
    ],
    "Write a python function to find smallest number in a list.": [
        "def find_smallest_number(numbers):\n    return min(numbers)"
    ],
    "Write a function to find the maximum difference between available pairs in the given tuple list.": [
        "def max_difference(pair_list):\n    max_diff = 0\n    for a, b in pair_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    ],
    "Write a function to sort a list of tuples using lambda.": [
        "def sort_tuples(tuples_list, key_index):\n    return sorted(tuples_list, key=lambda x: x[key_index])"
    ],
    "Write a function of recursion list sum.": [
        "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
    ],
    "Write a python function to count positive numbers in a list.": [
        "def count_positive_numbers(numbers):\n    count = 0\n    for number in numbers:\n        if number > 0:\n            count += 1\n    return count"
    ],
    "Write a function to find the number of ways to partition a set of bell numbers.": [
        "def bell_partition_count(n):\n    if n <= 1:\n        return 1\n    \n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n    \n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1]\n        for j in range(i - 1, 0, -1):\n            bell[j] = bell[j - 1] + bell[j]\n    \n    return bell[n]"
    ],
    "Write a python function to check whether the given array is monotonic or not.": [
        "def is_monotonic(arr):\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)"
    ],
    "Write a function to check whether a list contains the given sublist or not.": [
        "def contains_sublist(main_list, sub_list):\n    if not sub_list:\n        return True\n    if len(sub_list) > len(main_list):\n        return False\n    for i in range(len(main_list)):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n    return False"
    ],
    "Write a function to find whether all the given tuples have equal length or not.": [
        "def all_tuples_equal_length(tuples_list):\n    if not tuples_list:\n        return True\n    first_tuple_length = len(tuples_list[0])\n    return all(len(t) == first_tuple_length for t in tuples_list)"
    ],
    "Write a function to sort a list of elements using comb sort.": [
        "def comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n            i += 1\n\n    return arr"
    ],
    "Write a python function to check whether the given number can be represented as difference of two squares or not.": [
        "def can_be_difference_of_squares(n):\n    return n % 2 == 0 or n % 4 == 1\n\n# Example usage:\n# print(can_be_difference_of_squares(5))  # Output: True\n# print(can_be_difference_of_squares(6))  # Output: True\n# print(can_be_difference_of_squares(3))  # Output: False"
    ],
    "Write a function to split the given string with multiple delimiters by using regex.": [
        "import re\n\ndef split_string_with_delimiters(input_string, delimiters):\n    pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(pattern, input_string)\n\n# Example usage:\n# result = split_string_with_delimiters(\"apple,orange;banana\", [\",\", \";\"])\n# print(result)  # Output: ['apple', 'orange', 'banana']"
    ],
    "Write a function to check whether it follows the sequence given in the patterns array.": [
        "def follows_pattern(string, pattern):\n    if len(string) != len(pattern):\n        return False\n\n    string_to_pattern = {}\n    pattern_to_string = {}\n\n    for s, p in zip(string, pattern):\n        if s in string_to_pattern:\n            if string_to_pattern[s] != p:\n                return False\n        else:\n            string_to_pattern[s] = p\n\n        if p in pattern_to_string:\n            if pattern_to_string[p] != s:\n                return False\n        else:\n            pattern_to_string[p] = s\n\n    return True"
    ],
    "Write a function to find tuples which have all elements divisible by k from the given list of tuples.": [
        "def find_divisible_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(x % k == 0 for x in t)]"
    ],
    "Write a python function to count the number of squares in a rectangle.": [
        "def count_squares(m, n):\n    if m < n:\n        return count_squares(n, m)\n    count = 0\n    for i in range(1, n + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count"
    ],
    "Write a python function to find the difference between sum of even and odd digits.": [
        "def difference_even_odd_digits(n):\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    return even_sum - odd_sum"
    ],
    "Write a python function to find number of integers with odd number of set bits.": [
        "def count_odd_set_bits(n):\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count"
    ],
    "Write a python function to check whether the length of the word is odd or not.": [
        "def is_odd_length(word):\n    return len(word) % 2 != 0"
    ],
    "Write a function to find the nth tetrahedral number.": [
        "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6"
    ],
    "Write a function to zip the two given tuples.": [
        "def zip_tuples(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))"
    ],
    "Write a function to find the volume of a sphere.": [
        "import math\n\ndef sphere_volume(radius):\n    return (4/3) * math.pi * radius**3"
    ],
    "Write a python function to find the character made by adding all the characters of the given string.": [
        "def add_characters(s):\n    total = 0\n    for char in s:\n        total += ord(char)\n    return chr(total)"
    ],
    "Write a function to find the n-th number in newman conway sequence.": [
        "def newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1 or n == 2:\n        return 1\n    \n    p = [0] * (n + 1)\n    p[1] = 1\n    p[2] = 1\n    \n    for i in range(3, n + 1):\n        p[i] = p[p[i - 1]] + p[i - p[i - 1]]\n    \n    return p[n]"
    ],
    "Write a function to find the surface area of a sphere.": [
        "import math\n\ndef surface_area_of_sphere(radius):\n    return 4 * math.pi * radius ** 2"
    ],
    "Write a function to find nth centered hexagonal number.": [
        "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1"
    ],
    "Write a function to merge three dictionaries into a single expression.": [
        "def merge_three_dicts(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    ],
    "Write a function to get the frequency of the elements in a list.": [
        "def element_frequency(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"
    ],
    "Write a function to find the closest smaller number than n.": [
        "def closest_smaller_number(n):\n    return n - 1"
    ],
    "Write a python function to find the length of the longest word.": [
        "def longest_word_length(sentence):\n    words = sentence.split()\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n# Example usage:\n# print(longest_word_length(\"The quick brown fox jumps over the lazy dog\"))"
    ],
    "Write a function to check if a substring is present in a given list of string values.": [
        "def contains_substring(string_list, substring):\n    return any(substring in s for s in string_list)"
    ],
    "Write a function to check whether the given number is undulating or not.": [
        "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    first, second = num_str[0], num_str[1]\n    if first == second:\n        return False\n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first:\n                return False\n        else:\n            if num_str[i] != second:\n                return False\n    return True"
    ],
    "Write a function to calculate the value of 'a' to the power 'b'.": [
        "def power(a, b):\n    return a ** b"
    ],
    "Write a function to extract the index minimum value record from the given tuples.": [
        "def extract_min_value_index(tuples_list):\n    return min(tuples_list, key=lambda x: x[1])"
    ],
    "Write a python function to find the minimum length of sublist.": [
        "def min_sublist_length(lst):\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    ],
    "Write a python function to find the number of divisors of a given integer.": [
        "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    ],
    "Write a function to find frequency count of list of lists.": [
        "from collections import Counter\n\ndef frequency_count_of_list_of_lists(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    return Counter(flat_list)\n\n# Example usage:\n# list_of_lists = [[1, 2, 2], [3, 4, 4, 4], [5, 6, 2]]\n# print(frequency_count_of_list_of_lists(list_of_lists))"
    ],
    "Write a function to multiply all the numbers in a list and divide with the length of the list.": [
        "def multiply_and_divide(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    ],
    "Write a function to convert the given decimal number to its binary equivalent.": [
        "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output: \"1010\""
    ],
    "Write a function to find the next smallest palindrome of a specified number.": [
        "def next_smallest_palindrome(num):\n    num += 1\n    while True:\n        s = str(num)\n        if s == s[::-1]:\n            return num\n        num += 1"
    ],
    "Write a function to find the kth element in the given array.": [
        "def find_kth_element(arr, k):\n    if k < 0 or k >= len(arr):\n        return None\n    return arr[k]"
    ],
    "Write a function to convert snake case string to camel case string.": [
        "def snake_to_camel(snake_str):\n    return ''.join(word.capitalize() or '_' for word in snake_str.split('_'))"
    ],
    "Write a function to find eulerian number a(n, m).": [
        "def eulerian_number(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return ((n - m) * eulerian_number(n - 1, m - 1) + (m + 1) * eulerian_number(n - 1, m))"
    ],
    "Write a function to sort each sublist of strings in a given list of lists using lambda function.": [
        "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in list_of_lists]"
    ],
    "Write a python function to count true booleans in the given list.": [
        "def count_true_booleans(lst):\n    return sum(lst)"
    ],
    "Write a function to add the given list to the given tuples.": [
        "def add_list_to_tuples(tuples, lst):\n    return tuple(lst + list(t)) for t in tuples)"
    ],
    "Write a python function to count hexadecimal numbers for a given range.": [
        "def count_hexadecimal_numbers(start, end):\n    return len([hex(i) for i in range(start, end + 1)])"
    ],
    "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.": [
        "import heapq\n\ndef merge_sorted_iterators(*iterators):\n    merged_iter = heapq.merge(*iterators)\n    return merged_iter\n\n# Example usage:\n# iter1 = iter([1, 4, 7])\n# iter2 = iter([2, 5, 8])\n# iter3 = iter([3, 6, 9])\n# for value in merge_sorted_iterators(iter1, iter2, iter3):\n#     print(value)"
    ],
    "Write a python function to find the count of rotations of a binary string with odd value.": [
        "def count_odd_rotations(binary_str):\n    n = len(binary_str)\n    count = 0\n    for i in range(n):\n        rotated_str = binary_str[i:] + binary_str[:i]\n        if int(rotated_str, 2) % 2 == 1:\n            count += 1\n    return count\n\n# Example usage:\nbinary_str = \"101\"\nprint(count_odd_rotations(binary_str))  # Output: 3"
    ],
    "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.": [
        "def find_missing_ranges(nums, start, end):\n    nums.append(end + 1)  # Add the end+1 to ensure the last range is checked\n    prev = start - 1\n    result = []\n    \n    for num in nums:\n        if num > prev + 1:\n            result.append(f\"{prev + 1}->{num - 1}\" if prev + 1 != num - 1 else str(prev + 1))\n        prev = num\n    \n    return result\n\n# Example usage:\nnums = [0, 1, 3, 50, 75]\nstart = 0\nend = 99\nprint(find_missing_ranges(nums, start, end))"
    ],
    "Write a function to find common elements in given nested lists. * list item * list item * list item * list item": [
        "def find_common_elements(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\nprint(find_common_elements(nested_lists))  # Output: [3]"
    ],
    "Write a python function to find the perimeter of a cylinder.": [
        "def cylinder_perimeter(diameter, height):\n    return 2 * (diameter + height)"
    ],
    "Write a function to check if a string represents an integer or not.": [
        "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"
    ],
    "Write a function to assign frequency to each tuple in the given tuple list.": [
        "def assign_frequency(tuple_list):\n    frequency_dict = {}\n    for item in tuple_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    ],
    "Write a function to check whether all dictionaries in a list are empty or not.": [
        "def all_dictionaries_empty(dicts):\n    return all(not d for d in dicts)"
    ],
    "Write a function to convert a given tuple of positive integers into an integer.": [
        "def tuple_to_integer(tup):\n    return int(''.join(map(str, tup)))"
    ],
    "Write a function to convert all possible convertible elements in the list to float.": [
        "def convert_to_float(lst):\n    return [float(x) if isinstance(x, (int, str)) and x != '' else x for x in lst]"
    ],
    "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.": [
        "def string_to_list(s):\n    return list(s)"
    ],
    "Write a python function to find the element that appears only once in a sorted array.": [
        "def find_single_element(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 != 0 and arr[mid] == arr[mid - 1]):\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]"
    ],
    "Write a function to find the maximum product from the pairs of tuples within a given list.": [
        "def max_product_of_pairs(tuples_list):\n    return max(abs(a * b) for a, b in tuples_list)\n\n# Example usage:\n# tuples = [(1, 2), (3, 4), (-5, 6)]\n# print(max_product_of_pairs(tuples))  # Output: 30"
    ],
    "Write a function to find the triplet with sum of the given array": [
        "def find_triplet_with_sum(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return None"
    ],
    "Write a function to find n\u2019th smart number.": [
        "def nth_smart_number(n):\n    def is_smart(num):\n        while num % 2 == 0:\n            num //= 2\n        while num % 3 == 0:\n            num //= 3\n        return num == 1\n\n    count = 0\n    i = 1\n    while True:\n        if is_smart(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1"
    ],
    "Write a function to sum all amicable numbers from 1 to a specified number.": [
        "def sum_of_amicable_numbers(n):\n    def sum_of_proper_divisors(x):\n        return sum(divisor for divisor in range(1, x) if x % divisor == 0)\n\n    total = 0\n    for num in range(2, n + 1):\n        divisor_sum = sum_of_proper_divisors(num)\n        if divisor_sum != num and sum_of_proper_divisors(divisor_sum) == num:\n            total += num\n    return total"
    ],
    "Write a function to get the angle of a complex number.": [
        "import cmath\n\ndef get_angle_of_complex_number(z):\n    return cmath.phase(z)"
    ],
    "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.": [
        "def max_difference(binary_str):\n    max_diff = 0\n    current_sum = 0\n    min_sum = 0\n    \n    for char in binary_str:\n        if char == '0':\n            current_sum += 1\n        else:\n            current_sum -= 1\n        \n        max_diff = max(max_diff, current_sum - min_sum)\n        min_sum = min(min_sum, current_sum)\n    \n    return max_diff"
    ],
    "Write a python function to find the sum of common divisors of two given numbers.": [
        "def sum_of_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def get_divisors(n):\n        divisors = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n\n    g = gcd(a, b)\n    divisors = get_divisors(g)\n    return sum(divisors)\n\n# Example usage:\n# print(sum_of_common_divisors(12, 18))  # Output: 9 (1 + 2 + 3 + 3)"
    ],
    "Write a function to multiply two integers without using the * operator in python.": [
        "def multiply(a, b):\n    # Handle negative numbers\n    negative_result = (a < 0) ^ (b < 0)\n    a, b = abs(a), abs(b)\n    \n    result = 0\n    for _ in range(b):\n        result += a\n    \n    # Apply negative sign if necessary\n    return -result if negative_result else result"
    ],
    "Write a function to shortlist words that are longer than n from a given list of words.": [
        "def shortlist_long_words(words, n):\n    return [word for word in words if len(word) > n]"
    ],
    "Write a function to calculate magic square.": [
        "def generate_magic_square(n):\n    if n % 2 == 0:\n        return \"Size of the magic square must be an odd number.\"\n\n    magic_square = [[0] * n for _ in range(n)]\n    num = 1\n    i, j = 0, n // 2\n\n    while num <= n * n:\n        magic_square[i][j] = num\n        num += 1\n        newi, newj = (i - 1) % n, (j + 1) % n\n        if magic_square[newi][newj] != 0:\n            i = (i + 1) % n\n        else:\n            i, j = newi, newj\n\n    return magic_square\n\ndef print_magic_square(square):\n    for row in square:\n        print(\" \".join(f\"{num:2d}\" for num in row))\n\n# Example usage:\nn = 3\nmagic_square = generate_magic_square(n)\nprint_magic_square(magic_square)"
    ],
    "Write a function to find the item with maximum frequency in a given list.": [
        "def max_frequency_item(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency, key=frequency.get)\n    return max_item"
    ],
    "Write a python function to reverse only the vowels of a given string.": [
        "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(s_list)"
    ],
    "Write a function to convert tuple to a string.": [
        "def tuple_to_string(tup):\n    return ' '.join(map(str, tup))"
    ],
    "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.": [
        "def sum_of_negatives(numbers):\n    return sum(filter(lambda x: x < 0, numbers))"
    ],
    "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.": [
        "def is_last_even_or_odd(arr, p):\n    n = len(arr)\n    last_element = arr[-1]\n    if (last_element + p) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    ],
    "Write a function to find the nth hexagonal number.": [
        "def hexagonal_number(n):\n    return n * (2 * n - 1)"
    ],
    "Write a function to calculate electricity bill.": [
        "def calculate_electricity_bill(units_consumed):\n    if units_consumed <= 50:\n        return units_consumed * 0.50\n    elif units_consumed <= 150:\n        return 25 + (units_consumed - 50) * 0.75\n    elif units_consumed <= 250:\n        return 100 + (units_consumed - 150) * 1.20\n    else:\n        return 220 + (units_consumed - 250) * 1.50\n\n# Example usage:\n# bill = calculate_electricity_bill(180)\n# print(f\"The electricity bill is: {bill}\")"
    ],
    "Write a function to find the ration of zeroes in an array of integers.": [
        "def ratio_of_zeroes(arr):\n    if not arr:\n        return 0\n    zero_count = arr.count(0)\n    return zero_count / len(arr)"
    ],
    "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.": [
        "def can_be_sum_of_powers_of_2(n):\n    return n > 0 and (n & (n - 1)) == 0"
    ],
    "Write a function to find the circumference of a circle.": [
        "def find_circumference(radius):\n    return 2 * 3.14159 * radius"
    ],
    "Write a function to extract elements that occur singly in the given tuple list.": [
        "def extract_singly_occuring_elements(tuple_list):\n    element_count = {}\n    for tup in tuple_list:\n        for item in tup:\n            if item in element_count:\n                element_count[item] += 1\n            else:\n                element_count[item] = 1\n    singly_occuring_elements = [item for item, count in element_count.items() if count == 1]\n    return tuple(singly_occuring_elements)"
    ],
    "Write a function to sort a list of elements using pancake sort.": [
        "def flip(arr, k):\n    start = 0\n    while start < k:\n        arr[start], arr[k] = arr[k], arr[start]\n        start += 1\n        k -= 1\n\ndef find_max_index(arr, n):\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return max_index\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_index = find_max_index(arr, curr_size)\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n    return arr"
    ],
    "Write a function to count the same pair in three given lists.": [
        "def count_same_pair(list1, list2, list3):\n    count = 0\n    for x, y, z in zip(list1, list2, list3):\n        if x == y == z:\n            count += 1\n    return count"
    ],
    "Write a function to find number of lists present in the given tuple.": [
        "def count_lists_in_tuple(input_tuple):\n    return sum(1 for item in input_tuple if isinstance(item, list))"
    ],
    "Write a python function to find the sum of absolute differences in all pairs of the given array.": [
        "def sum_of_absolute_differences(arr):\n    arr.sort()\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        total_sum += (arr[i] * i) - (arr[i] * (n - i - 1))\n    return total_sum"
    ],
    "Write a python function to find the maximum difference between any two elements in a given array.": [
        "def max_difference(arr):\n    if not arr:\n        return 0\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element"
    ],
    "Write a function to find the ascii value of total characters in a string.": [
        "def ascii_value_total(s):\n    return sum(ord(char) for char in s)"
    ],
    "Write a function to find the maximum total path sum in the given triangle.": [
        "def max_path_sum(triangle):\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]"
    ],
    "Write a function to divide a number into two parts such that the sum of digits is maximum.": [
        "def max_digit_sum_partition(n):\n    n = str(n)\n    left = right = 0\n    max_sum = 0\n    max_partition = (0, 0)\n    \n    for i in range(1, len(n)):\n        left_part = n[:i]\n        right_part = n[i:]\n        current_sum = sum(int(digit) for digit in left_part) + sum(int(digit) for digit in right_part)\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_partition = (int(left_part), int(right_part))\n    \n    return max_partition"
    ],
    "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.": [
        "def longest_subsequence(arr):\n    if not arr:\n        return 0\n\n    subsequences = {arr[0]: 1}\n\n    for num in arr[1:]:\n        subsequences[num] = max(subsequences.get(num, 1), subsequences.get(num - 1, 0) + 1, subsequences.get(num + 1, 0) + 1)\n\n    return max(subsequences.values())"
    ],
    "Write a python function to find whether the given number is present in the infinite sequence or not.": [
        "def is_infinite_sequence(n):\n    return n > 0 and (n & (n - 1)) == 0"
    ],
    "Write a python function to check whether the given number is co-prime or not.": [
        "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef are_coprime(x, y):\n    return gcd(x, y) == 1"
    ],
    "Write a function to sort the given array by using merge sort.": [
        "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr"
    ],
    "Write a function to find the vertex of a parabola.": [
        "def find_parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    return (x_vertex, y_vertex)"
    ],
    "Write a function to extract every specified element from a given two dimensional list.": [
        "def extract_elements(matrix, row_index):\n    if 0 <= row_index < len(matrix):\n        return matrix[row_index]\n    else:\n        return []"
    ],
    "Write a python function to toggle all even bits of a given number.": [
        "def toggle_even_bits(n):\n    result = 0\n    count = 0\n    temp = n\n    while temp:\n        if count % 2 == 0:\n            result |= (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ result\n\n# Example usage:\nnumber = 29\nprint(toggle_even_bits(number))  # Output will be 31"
    ],
    "Write a function to convert a tuple of string values to a tuple of integer values.": [
        "def convert_tuple_to_int(tuple_of_strings):\n    return tuple(int(item) for item in tuple_of_strings)"
    ],
    "Write a function to reflect the run-length encoding from a list.": [
        "def reflect_run_length_encoding(encoded_list):\n    reflected_list = []\n    for item in encoded_list:\n        if isinstance(item, tuple) and len(item) == 2:\n            count, value = item\n            reflected_list.extend([value] * count)\n    return reflected_list"
    ],
    "Write a python function to find k number of operations required to make all elements equal.": [
        "def min_operations_to_equal(arr, k):\n    max_element = max(arr)\n    operations = 0\n    for num in arr:\n        if (max_element - num) % k != 0:\n            return -1\n        operations += (max_element - num) // k\n    return operations"
    ],
    "Write a function to print the season for the given month and day.": [
        "def get_season(month, day):\n    if (month == 3 and day >= 20) or (3 < month < 6) or (month == 6 and day < 21):\n        return \"Spring\"\n    elif (month == 6 and day >= 21) or (6 < month < 9) or (month == 9 and day < 22):\n        return \"Summer\"\n    elif (month == 9 and day >= 22) or (9 < month < 12) or (month == 12 and day < 21):\n        return \"Autumn\"\n    else:\n        return \"Winter\"\n\n# Example usage:\n# print(get_season(5, 15))  # Output: Spring\n# print(get_season(7, 15))  # Output: Summer\n# print(get_season(10, 15)) # Output: Autumn\n# print(get_season(2, 15))  # Output: Winter"
    ],
    "Write a function to find x and y that satisfies ax + by = n.": [
        "def find_xy(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            return x, (n - a * x) // b\n    return None, None"
    ],
    "Write a function to remove all elements from a given list present in another list.": [
        "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]"
    ],
    "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).": [
        "def sum_of_positive_integers(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total"
    ],
    "Write a function to calculate the area of a regular polygon.": [
        "import math\n\ndef regular_polygon_area(sides, length):\n    area = (sides * (length ** 2)) / (4 * math.tan(math.pi / sides))\n    return area"
    ],
    "Write a python function to check whether the sum of divisors are same or not.": [
        "def sum_of_divisors(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\ndef check_same_sum_of_divisors(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)"
    ],
    "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.": [
        "def count_matching_positions(s):\n    count = 0\n    for i in range(len(s)):\n        if (s[i].islower() and s[i] == chr(97 + i)) or (s[i].isupper() and s[i] == chr(65 + i)):\n            count += 1\n    return count"
    ],
    "Write a python function to count the pairs with xor as an even number.": [
        "def count_even_xor_pairs(arr):\n    count_0 = 0\n    count_1 = 0\n    for num in arr:\n        if num & 1 == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n    return (count_0 * (count_0 - 1)) // 2 + (count_1 * (count_1 - 1)) // 2\n\n# Example usage:\narr = [1, 2, 3, 4]\nprint(count_even_xor_pairs(arr))  # Output: 4"
    ],
    "Write a python function to find smallest power of 2 greater than or equal to n.": [
        "import math\n\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 1 << (n - 1).bit_length()"
    ],
    "Write a python function to find the frequency of a number in a given array.": [
        "def find_frequency(arr, num):\n    return arr.count(num)"
    ],
    "Write a function to calculate the nth pell number.": [
        "def pell_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b"
    ],
    "Write a function to find sum of the numbers in a list between the indices of a specified range.": [
        "def sum_in_range(numbers, start_index, end_index):\n    return sum(numbers[start_index:end_index + 1])"
    ],
    "Write a function to find the perimeter of a pentagon.": [
        "def pentagon_perimeter(side_length):\n    return 5 * side_length"
    ],
    "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item": [
        "def count_std_occurrences(s):\n    return s.count('std')"
    ],
    "Write a function to remove everything except alphanumeric characters from a string.": [
        "import re\n\ndef remove_non_alphanumeric(input_string):\n    return re.sub(r'[^a-zA-Z0-9]', '', input_string)"
    ],
    "Write a function to group a sequence of key-value pairs into a dictionary of lists.": [
        "def group_by_key(sequence):\n    grouped_dict = {}\n    for key, value in sequence:\n        if key not in grouped_dict:\n            grouped_dict[key] = []\n        grouped_dict[key].append(value)\n    return grouped_dict"
    ],
    "Write a function to verify validity of a string of parentheses.": [
        "def is_valid_parentheses(s: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack"
    ],
    "Write a function to find the perimeter of a triangle.": [
        "def triangle_perimeter(a, b, c):\n    return a + b + c"
    ],
    "Write a python function to find two distinct numbers such that their lcm lies within the given range.": [
        "def find_two_numbers_with_lcm_in_range(start, end):\n    if start < 2 or end < 2:\n        return None, None\n    \n    for i in range(2, end + 1):\n        for j in range(i + 1, end + 1):\n            lcm = (i * j) // gcd(i, j)\n            if start <= lcm <= end:\n                return i, j\n    \n    return None, None\n\nfrom math import gcd\n\n# Example usage:\n# num1, num2 = find_two_numbers_with_lcm_in_range(10, 50)\n# print(num1, num2)"
    ],
    "Write a function to search some literals strings in a string.": [
        "def search_literals(text, literals):\n    results = {literal: literal in text for literal in literals}\n    return results"
    ],
    "Write a function to find if the given number is a keith number or not.": [
        "def is_keith_number(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    sequence = digits[:]\n    \n    while sum(sequence[-num_digits:]) < num:\n        sequence.append(sum(sequence[-num_digits:]))\n    \n    return sum(sequence[-num_digits:]) == num\n\n# Example usage:\n# print(is_keith_number(197))\n# print(is_keith_number(14))"
    ],
    "Write a function to calculate distance between two points using latitude and longitude.": [
        "from math import radians, sin, cos, acos\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    \n    # Calculate the distance using the Haversine formula\n    distance = 6371.01 * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2))\n    return distance"
    ],
    "Write a function to find the longest common prefix in the given set of strings.": [
        "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix"
    ],
    "Write a function to find uppercase, lowercase, special character and numeric values using regex.": [
        "import re\n\ndef count_characters(text):\n    uppercase_count = len(re.findall(r'[A-Z]', text))\n    lowercase_count = len(re.findall(r'[a-z]', text))\n    special_count = len(re.findall(r'[^A-Za-z0-9]', text))\n    numeric_count = len(re.findall(r'\\d', text))\n    \n    return {\n        'uppercase': uppercase_count,\n        'lowercase': lowercase_count,\n        'special': special_count,\n        'numeric': numeric_count\n    }\n\n# Example usage:\ntext = \"Hello World! 123\"\nresult = count_characters(text)\nprint(result)"
    ],
    "Write a function to count all the distinct pairs having a difference of k in any array.": [
        "def count_distinct_pairs_with_difference_k(arr, k):\n    arr_set = set(arr)\n    count = 0\n    for num in arr_set:\n        if (num + k) in arr_set or (num - k) in arr_set:\n            count += 1\n    return count"
    ],
    "Write a function to find all the values in a list that are greater than a specified number.": [
        "def find_greater_values(lst, number):\n    return [value for value in lst if value > number]"
    ],
    "Write a function to find the focus of a parabola.": [
        "def find_focus(a, b, c):\n    x_focus = -b / (2 * a)\n    y_focus = (1 - (b**2) + (4 * a * c)) / (4 * a)\n    return (x_focus, y_focus)"
    ],
    "Write a function to search some literals strings in a string by using regex.": [
        "import re\n\ndef search_literals(input_string, literals):\n    pattern = re.compile('|'.join(map(re.escape, literals)))\n    return pattern.findall(input_string)\n\n# Example usage:\ninput_str = \"Hello world, welcome to the world of programming.\"\nliterals_to_search = [\"world\", \"programming\"]\nmatches = search_literals(input_str, literals_to_search)\nprint(matches)"
    ],
    "Write a function to find the longest common subsequence for the given two sequences.": [
        "def longest_common_subsequence(seq1, seq2):\n    m, n = len(seq1), len(seq2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    lcs = []\n    i, j = m, n\n    while i > 0 and j > 0:\n        if seq1[i - 1] == seq2[j - 1]:\n            lcs.append(seq1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    ],
    "Write a python function to check whether the given number can be represented by product of two squares or not.": [
        "def is_product_of_two_squares(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        j = int((n - i*i)**0.5)\n        if i * i + j * j == n:\n            return True\n    return False"
    ],
    "Write a python function to find the first missing positive number.": [
        "def first_missing_positive(nums):\n    n = len(nums)\n    \n    # Step 1: Replace negative numbers, zeros, and numbers larger than n with a marker (n+1)\n    for i in range(n):\n        if nums[i] <= 0 or nums[i] > n:\n            nums[i] = n + 1\n    \n    # Step 2: Use index as a hash key and number sign as a presence detector\n    for i in range(n):\n        num = abs(nums[i])\n        if 1 <= num <= n:\n            nums[num - 1] = -abs(nums[num - 1])\n    \n    # Step 3: Find the first cell which isn't negative\n    for i in range(n):\n        if nums[i] > 0:\n            return i + 1\n    \n    # If all cells are negative, then the first missing positive number is n + 1\n    return n + 1"
    ],
    "Write a python function to count the number of integral co-ordinates that lie inside a square.": [
        "def count_integral_points_in_square(x1, y1, x2, y2):\n    if x1 == x2 or y1 == y2:\n        return 0\n    width = abs(x2 - x1) - 1\n    height = abs(y2 - y1) - 1\n    return width * height\n\n# Example usage:\n# print(count_integral_points_in_square(1, 1, 4, 4))  # Output: 4"
    ],
    "Write a function to check whether the given month name contains 30 days or not.": [
        "def has_30_days(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days"
    ],
    "Write a python function to check whether a string has atleast one letter and one number.": [
        "def has_letter_and_number(s):\n    has_letter = False\n    has_number = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        if char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False"
    ],
    "Write a function to remove the duplicates from the given tuple.": [
        "def remove_duplicates(input_tuple):\n    return tuple(dict.fromkeys(input_tuple))"
    ],
    "Write a python function to convert octal number to decimal number.": [
        "def octal_to_decimal(octal_num):\n    return int(str(octal_num), 8)"
    ],
    "Write a python function to find the first position of an element in a sorted array.": [
        "def find_first_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result"
    ],
    "Write a function to remove all the tuples with length k.": [
        "def remove_tuples_with_length_k(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]"
    ],
    "Write a function to perform the exponentiation of the given two tuples.": [
        "def tuple_exponentiation(tuple1, tuple2):\n    return tuple(a ** b for a, b in zip(tuple1, tuple2))"
    ],
    "Write a function to find the largest triangle that can be inscribed in an ellipse.": [
        "import math\n\ndef largest_triangle_in_ellipse(a, b):\n    # Calculate the area of the largest inscribed triangle\n    area = 3 * math.sqrt(3) * (a * b)\n    return area\n\n# Example usage:\na = 5\nb = 3\nprint(largest_triangle_in_ellipse(a, b))"
    ],
    "Write a python function to find highest power of 2 less than or equal to given number.": [
        "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    ],
    "Write a function to find all index positions of the maximum values in a given list.": [
        "def find_max_indices(lst):\n    max_value = max(lst)\n    return [index for index, value in enumerate(lst) if value == max_value]"
    ],
    "Write a python function to check whether the elements in a list are same or not.": [
        "def all_elements_same(lst):\n    return len(set(lst)) == 1\n\n# Example usage:\n# my_list = [1, 1, 1, 1]\n# print(all_elements_same(my_list))  # Output: True\n\n# my_list = [1, 2, 1, 1]\n# print(all_elements_same(my_list))  # Output: False"
    ],
    "Write a function to remove even characters in a string.": [
        "def remove_even_characters(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])"
    ],
    "Write a python function to find the hamming distance between given two integers.": [
        "def hamming_distance(x, y):\n    xor_result = x ^ y\n    distance = 0\n    while xor_result:\n        distance += xor_result & 1\n        xor_result >>= 1\n    return distance"
    ],
    "Write a python function to count the occurrence of a given character in a string.": [
        "def count_occurrence(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count"
    ],
    "Write a function to find the inversions of tuple elements in the given tuple list.": [
        "def invert_tuples(tuple_list):\n    return [tuple(element[::-1] for element in tup) for tup in tuple_list]"
    ],
    "Write a function to perform the adjacent element concatenation in the given tuples.": [
        "def concatenate_adjacent_elements(tuples_list):\n    return [(a + b) for a, b in zip(tuples_list[:-1], tuples_list[1:])]\n\n# Example usage:\ntuples_list = [(1, 2), (3, 4), (5, 6)]\nresult = concatenate_adjacent_elements(tuples_list)\nprint(result)  # Output: [(4, 6), (8, 10)]"
    ],
    "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.": [
        "def count_longest_repeating_subsequences(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][n]\n\n# Example usage:\ns = \"aabb\"\nprint(count_longest_repeating_subsequences(s))  # Output: 2"
    ],
    "Write a function to check the given decimal with a precision of 2 by using regex.": [
        "import re\n\ndef is_decimal_with_precision_2(decimal_str):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, decimal_str))"
    ],
    "Write a function to delete the smallest element from the given heap and then insert a new item.": [
        "import heapq\n\ndef delete_smallest_and_insert(heap, new_item):\n    heapq.heapreplace(heap, new_item)\n    return heap"
    ],
    "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.": [
        "import re\n\ndef check_characters(input_string):\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern, input_string))"
    ],
    "Write a python function to count numbers whose oth and nth bits are set.": [
        "def count_numbers_with_0th_and_nth_bits_set(n, limit):\n    count = 0\n    for i in range(1, limit + 1):\n        if (i & 1) and (i & (1 << n)):\n            count += 1\n    return count"
    ],
    "Write a python function to find the sum of fourth power of n natural numbers.": [
        "def sum_of_fourth_powers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i**4\n    return total\n\n# Example usage:\n# print(sum_of_fourth_powers(3))  # Output: 98 (1^4 + 2^4 + 3^4)"
    ],
    "Write a function to perform the concatenation of two string tuples.": [
        "def concatenate_string_tuples(tuple1, tuple2):\n    return tuple1 + tuple2"
    ],
    "Write a function to convert radians to degrees.": [
        "import math\n\ndef radians_to_degrees(radians):\n    return radians * (180 / math.pi)"
    ],
    "Write a function to decode a run-length encoded given list.": [
        "def decode_rle(encoded_list):\n    decoded_list = []\n    i = 0\n    while i < len(encoded_list):\n        count = encoded_list[i]\n        value = encoded_list[i + 1]\n        decoded_list.extend([value] * count)\n        i += 2\n    return decoded_list"
    ],
    "Write a python function to find the minimum operations required to make two numbers equal.": [
        "def min_operations(a, b):\n    count = 0\n    while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n        count += 1\n    return count"
    ],
    "Write a function to extract maximum and minimum k elements in the given tuple.": [
        "def extract_k_elements(tup, k):\n    sorted_tup = sorted(tup)\n    min_elements = sorted_tup[:k]\n    max_elements = sorted_tup[-k:]\n    return min_elements, max_elements\n\n# Example usage:\n# tup = (5, 1, 9, 3, 7, 8, 2, 4, 6, 0)\n# k = 3\n# print(extract_k_elements(tup, k))"
    ],
    "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.": [
        "def replace_max_occurrences(text, n):\n    import re\n    return re.sub(r'[ ,.]', ':', text, n)"
    ],
    "Write a python function to find the first even number in a given list of numbers.": [
        "def first_even_number(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None"
    ],
    "Write a function to check if all the elements in tuple have same data type or not.": [
        "def check_uniform_type(tup):\n    return len(set(map(type, tup))) == 1"
    ],
    "Write a function to check for majority element in the given sorted array.": [
        "def is_majority_element(arr, x):\n    n = len(arr)\n    i = (n // 2)\n    if arr[i] == x:\n        return True\n    return False"
    ],
    "Write a python function to count set bits of a given number.": [
        "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    ],
    "Write a python function to find the minimum element in a sorted and rotated array.": [
        "def find_min_in_rotated_array(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if nums[mid] > nums[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return nums[left]"
    ],
    "Write a python function to remove the characters which have odd index values of a given string.": [
        "def remove_odd_index_characters(input_string):\n    return input_string[::2]"
    ],
    "Write a function to find minimum of three numbers.": [
        "def find_minimum(a, b, c):\n    return min(a, b, c)"
    ],
    "Write a python function to check whether all the bits are unset in the given range or not.": [
        "def are_bits_unset(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    return (n & num) == 0"
    ],
    "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.": [
        "def rearrange_negatives_before_positives(arr):\n    negatives = [x for x in arr if x < 0]\n    positives = [x for x in arr if x >= 0]\n    return negatives + positives\n\n# Example usage:\n# arr = [1, -2, 3, -4, 5, -6]\n# print(rearrange_negatives_before_positives(arr))\n# Output: [-2, -4, -6, 1, 3, 5]"
    ],
    "Write a function to replace blank spaces with any character in a string.": [
        "def replace_spaces(input_string, replacement_char):\n    return input_string.replace(' ', replacement_char)"
    ],
    "Write a function to find the maximum sum in the given right triangle of numbers.": [
        "def max_sum_triangle(triangle):\n    if not triangle:\n        return 0\n\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = triangle[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + triangle[i][0]\n        for j in range(1, i):\n            dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n        dp[i][i] = dp[i-1][i-1] + triangle[i][i]\n\n    return max(dp[n-1])"
    ],
    "Write a function to get the n largest items from a dataset.": [
        "def get_n_largest_items(data, n):\n    return sorted(data, reverse=True)[:n]"
    ],
    "Write a function to find the lateral surface area of a cylinder.": [
        "def lateral_surface_area_cylinder(radius, height):\n    return 2 * 3.14159 * radius * height"
    ],
    "Write a function to find the volume of a cube.": [
        "def cube_volume(side_length):\n    return side_length ** 3"
    ],
    "Write a python function to set all even bits of a given number.": [
        "def set_even_bits(n):\n    mask = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            mask |= (1 << count)\n        count += 1\n        temp >>= 1\n    return n | mask"
    ],
    "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.": [
        "def max_equilateral_triangles(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for i in range(1, n + 1):\n        total += (n - i + 1) * (n - i + 2) // 2\n    return total\n\n# Example usage:\n# print(max_equilateral_triangles(3))"
    ],
    "Write a function to check the occurrences of records which occur similar times in the given tuples.": [
        "def find_similar_occurrences(records):\n    from collections import Counter\n    count = Counter(records)\n    similar_count = {key: value for key, value in count.items() if list(count.values()).count(value) > 1}\n    return similar_count\n\n# Example usage:\nrecords = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (3, 4)]\nsimilar_occurrences = find_similar_occurrences(records)\nprint(similar_occurrences)"
    ],
    "Write a python function to count number of non-empty substrings of a given string.": [
        "def count_non_empty_substrings(s):\n    n = len(s)\n    return (n * (n + 1)) // 2"
    ],
    "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.": [
        "def count_sequences(n, m):\n    def dp(index, prev):\n        if index == n:\n            return 1\n        count = 0\n        for i in range(2 * prev, m + 1):\n            count += dp(index + 1, i)\n        return count\n\n    return dp(0, 0)\n\n# Example usage:\nn = 3\nm = 10\nprint(count_sequences(n, m))"
    ],
    "Write a function to replace the last element of the list with another list.": [
        "def replace_last_element(main_list, replacement_list):\n    main_list[-1:] = replacement_list\n    return main_list"
    ],
    "Write a function to generate a 3d array having each element as '*'.": [
        "def generate_3d_array(x_dim, y_dim, z_dim):\n    return [[[ '*' for _ in range(z_dim)] for _ in range(y_dim)] for _ in range(x_dim)]"
    ],
    "Write a function to count total characters in a string.": [
        "def count_characters(s):\n    return len(s)"
    ],
    "Write a function to sort the given list based on the occurrence of first element of tuples.": [
        "def sort_by_first_element_occurrence(lst):\n    # Create a dictionary to count occurrences of the first element of each tuple\n    occurrence_count = {}\n    for item in lst:\n        if item[0] in occurrence_count:\n            occurrence_count[item[0]] += 1\n        else:\n            occurrence_count[item[0]] = 1\n    \n    # Sort the list based on the occurrence of the first element of each tuple\n    sorted_list = sorted(lst, key=lambda x: occurrence_count[x[0]], reverse=True)\n    \n    return sorted_list"
    ],
    "Write a python function to find the next perfect square greater than a given number.": [
        "import math\n\ndef next_perfect_square(n):\n    root = math.ceil(math.sqrt(n))\n    return root * root"
    ],
    "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.": [
        "def maxSumBiTonicSubSeq(arr):\n    n = len(arr)\n    \n    left = [0] * n\n    right = [0] * n\n    \n    for i in range(n):\n        left[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                left[i] = max(left[i], left[j] + arr[i])\n    \n    for i in range(n-1, -1, -1):\n        right[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                right[i] = max(right[i], right[j] + arr[i])\n    \n    return max(left[i] + right[i] - arr[i] for i in range(n))"
    ],
    "Write a function for computing square roots using the babylonian method.": [
        "def babylonian_sqrt(n, tolerance=1e-10):\n    if n < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number\")\n    if n == 0:\n        return 0\n    guess = n / 2.0\n    while True:\n        new_guess = (guess + n / guess) / 2.0\n        if abs(new_guess - guess) < tolerance:\n            return new_guess\n        guess = new_guess"
    ],
    "Write a function to find the longest palindromic subsequence in the given string.": [
        "def longest_palindromic_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]"
    ],
    "Write a function to find the intersection of two arrays using lambda function.": [
        "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))"
    ],
    "Write a python function to count the occcurences of an element in a tuple.": [
        "def count_occurrences(tup, element):\n    return tup.count(element)"
    ],
    "Write a function to insert an element before each element of a list.": [
        "def insert_before_each(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"
    ],
    "Write a python function to convert complex numbers to polar coordinates.": [
        "import cmath\n\ndef complex_to_polar(complex_num):\n    return cmath.polar(complex_num)"
    ],
    "Write a python function to count integers from a given list.": [
        "def count_integers(input_list):\n    return sum(isinstance(x, int) for x in input_list)"
    ],
    "Write a function to find all words starting with 'a' or 'e' in a given string.": [
        "import re\n\ndef find_words_starting_with_a_or_e(text):\n    words = re.findall(r'\\b[ae]\\w*', text, re.IGNORECASE)\n    return words"
    ],
    "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.": [
        "from itertools import combinations_with_replacement\n\ndef generate_color_combinations(colors, num_colors):\n    return list(combinations_with_replacement(colors, num_colors))\n\n# Example usage:\ncolors = ['red', 'green', 'blue']\nnum_colors = 2\ncombinations = generate_color_combinations(colors, num_colors)\nfor combo in combinations:\n    print(combo)"
    ],
    "Write a python function to count the number of prime numbers less than a given non-negative number.": [
        "def countPrimes(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)"
    ],
    "Write a function to swap two numbers.": [
        "def swap_numbers(a, b):\n    return b, a\n\n# Example usage:\nx = 5\ny = 10\nx, y = swap_numbers(x, y)\nprint(\"x =\", x)  # Output: x = 10\nprint(\"y =\", y)  # Output: y = 5"
    ],
    "Write a function to find number of odd elements in the given list using lambda function.": [
        "def count_odd_elements(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))"
    ],
    "Write a function to maximize the given two tuples.": [
        "def maximize_tuples(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))"
    ],
    "Write a function to find the nth newman\u2013shanks\u2013williams prime number.": [
        "def newman_shanks_williams_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        m = n - 2\n        p_m = (m * m) + 1\n        return p_m\n\n# Example usage:\nn = 5\nprint(newman_shanks_williams_prime(n))"
    ],
    "Write a function to perform mathematical division operation across the given tuples.": [
        "def divide_tuples(tuple1, tuple2):\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Example usage:\ntuple1 = (10, 20, 30)\ntuple2 = (2, 4, 5)\nprint(divide_tuples(tuple1, tuple2))"
    ],
    "Write a function to split a given list into two parts where the length of the first part of the list is given.": [
        "def split_list(input_list, first_part_length):\n    return input_list[:first_part_length], input_list[first_part_length:]"
    ],
    "Write a function to merge two dictionaries.": [
        "def merge_dictionaries(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict"
    ],
    "Write a function to calculate a dog's age in dog's years.": [
        "def dog_years(human_years):\n    if human_years < 0:\n        return \"Age must be positive\"\n    elif human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 15 + 9\n    else:\n        return 24 + (human_years - 2) * 5"
    ],
    "Write a function to split a list for every nth element.": [
        "def split_list_nth(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]"
    ],
    "Write a function to find the lateral surface area of a cube.": [
        "def lateral_surface_area_of_cube(side_length):\n    return 4 * side_length ** 2"
    ],
    "Write a python function to find the sum of squares of first n odd natural numbers.": [
        "def sum_of_squares_of_odd_numbers(n):\n    return sum((2*i + 1)**2 for i in range(n))"
    ],
    "Write a function to find the n'th star number.": [
        "def nth_star_number(n):\n    return 6 * n * (n - 1) + 1"
    ],
    "Write a function to find the ascii value of a character.": [
        "def find_ascii_value(character):\n    return ord(character)"
    ],
    "Write a python function to find the sum of even numbers at even positions.": [
        "def sum_even_numbers_at_even_positions(numbers):\n    return sum(num for i, num in enumerate(numbers) if i % 2 == 0 and num % 2 == 0)"
    ],
    "Write a python function to find the sum of fifth power of first n even natural numbers.": [
        "def sum_of_fifth_powers(n):\n    total = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        total += even_number ** 5\n    return total"
    ],
    "Write a function to perfom the rear element extraction from list of tuples records.": [
        "def extract_rear_elements(records):\n    return [record[-1] for record in records]"
    ],
    "Write a function to substract the contents of one tuple with corresponding index of other tuple.": [
        "def subtract_tuples(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))"
    ],
    "Write a python function to find sum of even index binomial coefficients.": [
        "def sum_even_index_binomial_coeffs(n):\n    return 2 ** (n - 1)"
    ],
    "Write a python function to find the position of the last removed element from the given array.": [
        "def last_removed_position(arr):\n    max_val = max(arr)\n    max_index = arr.index(max_val)\n    return max_index"
    ],
    "Write a function to find the volume of a cylinder.": [
        "import math\n\ndef cylinder_volume(radius, height):\n    return math.pi * radius ** 2 * height"
    ],
    "Write a function to filter a dictionary based on values.": [
        "def filter_dict_by_value(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}"
    ],
    "Write a function to find the element count that occurs before the record in the given tuple.": [
        "def count_elements_before_record(input_tuple, target):\n    return input_tuple.index(target)"
    ],
    "Write a function to find the nth decagonal number.": [
        "def decagonal_number(n):\n    return 4 * n * n - 3 * n"
    ],
    "Write a function to search an element in the given array by using sequential search.": [
        "def sequential_search(arr, target):\n    for index, element in enumerate(arr):\n        if element == target:\n            return index\n    return -1"
    ],
    "Write a python function to check if the elements of a given list are unique or not.": [
        "def are_elements_unique(lst):\n    return len(lst) == len(set(lst))"
    ],
    "Write a function to substaract two lists using map and lambda function.": [
        "def subtract_lists(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))"
    ],
    "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.": [
        "def check_digit_frequency(n):\n    str_n = str(n)\n    digit_count = [0] * 10\n    for digit in str_n:\n        digit_count[int(digit)] += 1\n    for i in range(10):\n        if digit_count[i] > i:\n            return False\n    return True"
    ],
    "Write a function to check whether all items of a list are equal to a given string.": [
        "def all_items_equal(lst, string):\n    return all(item == string for item in lst)"
    ],
    "Write a function that matches a string that has an a followed by two to three 'b'.": [
        "import re\n\ndef match_string(s):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(match_string(\"ab\"))      # False\nprint(match_string(\"aabbb\"))   # True\nprint(match_string(\"abbbb\"))   # False\nprint(match_string(\"cabbbbc\")) # True"
    ],
    "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.": [
        "def max_subarray_sum(arr, k):\n    def kadane(arr):\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for num in arr[1:]:\n            max_ending_here = max(num, max_ending_here + num)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    n = len(arr)\n    if k == 1:\n        return kadane(arr)\n\n    total_max_sum = kadane(arr)\n    current_prefix_sum = 0\n    max_prefix_sum = -float('inf')\n\n    for i in range(n):\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n\n    current_suffix_sum = 0\n    max_suffix_sum = -float('inf')\n\n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n\n    total_array_sum = sum(arr)\n    if total_array_sum > 0:\n        result = max(total_max_sum, max_prefix_sum + max_suffix_sum + (k-2) * total_array_sum)\n    else:\n        result = max(total_max_sum, max_prefix_sum + max_suffix_sum)\n\n    return result"
    ],
    "Write a python function to find the sum of squares of first n even natural numbers.": [
        "def sum_of_squares_of_even_numbers(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total"
    ],
    "Write a function to count array elements having modular inverse under given prime number p equal to itself.": [
        "def count_self_modular_inverse(arr, p):\n    count = 0\n    for num in arr:\n        if num != 0 and (num * num) % p == 1:\n            count += 1\n    return count"
    ],
    "Write a python function to calculate the number of odd days in a given year.": [
        "def is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n\ndef odd_days_in_year(year):\n    days_in_year = 366 if is_leap_year(year) else 365\n    odd_days = days_in_year % 7\n    return odd_days\n\n# Example usage:\nyear = 2023\nprint(odd_days_in_year(year))  # Output: 1"
    ],
    "Write a function to find the list of lists with maximum length.": [
        "def max_length_lists(list_of_lists):\n    if not list_of_lists:\n        return []\n    max_length = max(len(lst) for lst in list_of_lists)\n    return [lst for lst in list_of_lists if len(lst) == max_length]"
    ],
    "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.": [
        "def numWays(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    same = 0\n    diff = k\n    \n    for i in range(2, n + 1):\n        new_same = diff\n        diff = (same + diff) * (k - 1)\n        same = new_same\n    \n    return same + diff"
    ],
    "Write a python function to find quotient of two numbers.": [
        "def find_quotient(dividend, divisor):\n    if divisor == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    return dividend / divisor"
    ],
    "Write a function to find the third side of a right angled triangle.": [
        "import math\n\ndef find_third_side(a, b):\n    return math.sqrt(a**2 + b**2)"
    ],
    "Write a function to find the maximum value in a given heterogeneous list.": [
        "def find_max_in_heterogeneous_list(heterogeneous_list):\n    max_value = None\n    for item in heterogeneous_list:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value"
    ],
    "Write a function to return the sum of all divisors of a number.": [
        "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total"
    ],
    "Write a python function to count inversions in an array.": [
        "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n    \n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i...mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n    \n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n    \n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n    \n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n        \n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n    \n    return inv_count\n\ndef count_inversions(arr):\n    temp_arr = [0]*len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)\n\n# Example usage:\narr = [1, 20, 6, 4, 5]\nprint(\"Number of inversions are\", count_inversions(arr))"
    ],
    "Write a function to flatten a given nested list structure.": [
        "def flatten(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten(element))\n        else:\n            flat_list.append(element)\n    return flat_list"
    ],
    "Write a function to find the nested list elements which are present in another list.": [
        "def find_nested_elements(nested_list, flat_list):\n    result = []\n    for sublist in nested_list:\n        for item in sublist:\n            if item in flat_list:\n                result.append(item)\n    return result"
    ],
    "Write a function to calculate the maximum aggregate from the list of tuples.": [
        "def max_aggregate(tuples_list):\n    return max(sum(t) for t in tuples_list)"
    ],
    "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.": [
        "from math import comb\n\ndef count_balanced_sequences(n):\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) * comb(n, k)\n    return total_count\n\n# Example usage:\nn = 3\nprint(count_balanced_sequences(n))  # Output: 20"
    ],
    "Write a function to find the depth of a dictionary.": [
        "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0"
    ],
    "Write a python function to find the most significant bit number which is also a set bit.": [
        "def most_significant_set_bit(n):\n    if n == 0:\n        return 0\n    msb = -1\n    while n > 0:\n        n = n >> 1\n        msb += 1\n    return msb"
    ],
    "Write a python function to check whether the count of inversion of two types are same or not.": [
        "def count_inversions(arr):\n    inversions = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions\n\ndef check_same_inversions(arr1, arr2):\n    return count_inversions(arr1) == count_inversions(arr2)\n\n# Example usage:\n# arr1 = [1, 2, 3]\n# arr2 = [3, 2, 1]\n# print(check_same_inversions(arr1, arr2))  # Output: True"
    ],
    "Write a python function to find element at a given index after number of rotations.": [
        "def find_element_after_rotations(arr, rotations, index):\n    n = len(arr)\n    effective_rotations = rotations % n\n    new_index = (index - effective_rotations + n) % n\n    return arr[new_index]"
    ],
    "Write a function to match two words from a list of words starting with letter 'p'.": [
        "def match_words(word_list):\n    matched_words = []\n    for word in word_list:\n        if word.startswith('p'):\n            matched_words.append(word)\n    return matched_words\n\n# Example usage:\nwords = [\"apple\", \"orange\", \"pineapple\", \"banana\", \"peach\"]\nmatched = match_words(words)\nprint(matched)"
    ],
    "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .": [
        "def max_sum_increasing_subseq_with_k(arr, n, i, k):\n    if i >= n or k >= n:\n        return 0\n    if arr[i] > arr[k]:\n        return arr[k]\n    max_sum = 0\n    for j in range(i + 1, k):\n        if arr[j] > arr[i]:\n            max_sum = max(max_sum, max_sum_increasing_subseq_with_k(arr, n, j, k))\n    return arr[i] + max_sum"
    ],
    "Write a function to get a colon of a tuple.": [
        "def tuple_colon(tup, index):\n    return tup[:index]"
    ],
    "Write a function to find the specified number of largest products from two given lists.": [
        "def largest_products(list1, list2, n):\n    products = sorted([x * y for x in list1 for y in list2], reverse=True)\n    return products[:n]"
    ],
    "Write a python function to find the maximum of two numbers.": [
        "def max_of_two_numbers(a, b):\n    return max(a, b)"
    ],
    "Write a function to convert a given string to a tuple.": [
        "def string_to_tuple(s):\n    return tuple(s)"
    ],
    "Write a python function to set the left most unset bit.": [
        "def set_left_most_unset_bit(n):\n    # If n is 0, return 1 as the binary representation of 0 is 0000...000 and the leftmost unset bit is the first position.\n    if n == 0:\n        return 1\n    \n    # Initialize position to keep track of the current bit position.\n    position = 0\n    # Create a mask with all bits set to 1 up to the current bit position.\n    mask = 1\n    \n    # Iterate through each bit position until all bits have been checked.\n    while mask <= n:\n        # If the current bit at position 'position' in 'n' is 0, set it.\n        if (n & mask) == 0:\n            # Set the bit at the current position.\n            return n | mask\n        \n        # Move to the next bit position by left shifting the mask.\n        mask <<= 1\n        # Increment the position counter.\n        position += 1\n    \n    # If no unset bit was found, return n (all bits were already set).\n    return n"
    ],
    "Write a function to find the volume of a cone.": [
        "import math\n\ndef cone_volume(radius, height):\n    return (1/3) * math.pi * radius**2 * height"
    ],
    "Write a python function to print positive numbers in a list.": [
        "def print_positive_numbers(numbers):\n    for number in numbers:\n        if number > 0:\n            print(number)"
    ],
    "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.": [
        "def max_sum_no_adjacent_2xn(grid):\n    if not grid or not grid[0]:\n        return 0\n    \n    n = len(grid[0])\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    # Initialize the dp arrays\n    incl = [0] * n\n    excl = [0] * n\n    \n    # Base cases\n    incl[0] = grid[0][0]\n    excl[0] = 0\n    \n    for i in range(1, n):\n        excl[i] = max(excl[i-1], incl[i-1])\n        incl[i] = excl[i-1] + max(grid[0][i], grid[1][i])\n    \n    return max(excl[n-1], incl[n-1])"
    ],
    "Write a python function to find the first maximum length of even word.": [
        "def first_max_length_even_word(sentence):\n    words = sentence.split()\n    max_length = 0\n    first_even_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n            first_even_word = word\n    return first_even_word\n\n# Example usage:\nsentence = \"This is a simple test case\"\nprint(first_max_length_even_word(sentence))  # Output: \"simple\""
    ],
    "Write a function to find the index of the last occurrence of a given number in a sorted array.": [
        "def last_occurrence(arr, x):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"
    ],
    "Write a function to reflect the modified run-length encoding from a list.": [
        "def reflect_run_length_encoding(encoded_list):\n    decoded_list = []\n    for i in range(0, len(encoded_list), 2):\n        count = encoded_list[i]\n        value = encoded_list[i + 1]\n        decoded_list.extend([value] * count)\n    return decoded_list"
    ],
    "Write a python function to find the maximum volume of a cuboid with given sum of sides.": [
        "def max_volume(s):\n    a = b = c = s // 3\n    return a * b * c"
    ],
    "Write a function to find all five characters long word in the given string by using regex.": [
        "import re\n\ndef find_five_letter_words(text):\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"Here are some five letter words like happy, sunny, apple, and maybe.\"\nprint(find_five_letter_words(text))"
    ],
    "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.": [
        "def difference_square_sum_and_sum_squares(n):\n    square_sum = 0\n    sum_squares = 0\n    for i in range(1, n + 1):\n        square_sum += i\n        sum_squares += i * i\n    return square_sum * square_sum - sum_squares\n\n# Example usage:\nn = 10\nresult = difference_square_sum_and_sum_squares(n)\nprint(result)"
    ],
    "Write a function to find the demlo number for the given number.": [
        "def demlo_number(n):\n    result = \"\"\n    for i in range(1, n + 1):\n        result += str(i)\n    for i in range(n - 1, 0, -1):\n        result += str(i)\n    return result\n\n# Example usage:\nn = 5\nprint(demlo_number(n))  # Output: \"123454321\""
    ],
    "Write a function to find all index positions of the minimum values in a given list.": [
        "def find_min_indices(lst):\n    min_value = min(lst)\n    return [index for index, value in enumerate(lst) if value == min_value]"
    ],
    "Write a function to re-arrange the given array in alternating positive and negative items.": [
        "def rearrange_alternate(arr):\n    pos = []\n    neg = []\n    \n    for num in arr:\n        if num > 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n    \n    i, j = 0, 0\n    result = []\n    \n    while i < len(pos) and j < len(neg):\n        result.append(pos[i])\n        result.append(neg[j])\n        i += 1\n        j += 1\n    \n    while i < len(pos):\n        result.append(pos[i])\n        i += 1\n    \n    while j < len(neg):\n        result.append(neg[j])\n        j += 1\n    \n    return result\n\n# Example usage:\n# arr = [1, 2, 3, -4, -1, 4]\n# print(rearrange_alternate(arr))\n\n\nThis function takes an array as input and returns a new array where the elements are arranged in an alternating positive and negative pattern. If there are more positive or negative numbers, the remaining elements are appended at the end of the result array."
    ],
    "Write a function to extract the sum of alternate chains of tuples.": [
        "def sum_alternate_chains_of_tuples(tuples_list):\n    total_sum = 0\n    for i, tup in enumerate(tuples_list):\n        if i % 2 == 0:\n            total_sum += sum(tup)\n    return total_sum\n\n# Example usage:\ntuples_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(sum_alternate_chains_of_tuples(tuples_list))  # Output: 14"
    ],
    "Write a python function to find the minimum number of squares whose sum is equal to a given number.": [
        "def min_squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
    ],
    "Write a function to get the word with most number of occurrences in the given strings list.": [
        "from collections import Counter\n\ndef most_frequent_word(words_list):\n    word_counts = Counter(words_list)\n    return word_counts.most_common(1)[0][0]"
    ],
    "Write a function to print check if the triangle is isosceles or not.": [
        "def is_isosceles_triangle(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n# Example usage:\na = 5\nb = 5\nc = 8\nif is_isosceles_triangle(a, b, c):\n    print(\"The triangle is isosceles.\")\nelse:\n    print(\"The triangle is not isosceles.\")"
    ],
    "Write a function to rotate a given list by specified number of items to the left direction.": [
        "def rotate_left(lst, n):\n    return lst[n:] + lst[:n]"
    ],
    "Write a python function to count negative numbers in a list.": [
        "def count_negative_numbers(lst):\n    return sum(1 for x in lst if x < 0)"
    ],
    "Write a function to find all three, four, five characters long words in the given string by using regex.": [
        "import re\n\ndef find_words(text):\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n\n# Example usage:\n# result = find_words(\"This is a test string with some words\")\n# print(result)"
    ],
    "Write a python function to count unset bits of a given number.": [
        "def count_unset_bits(n):\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count"
    ],
    "Write a function to count character frequency of a given string.": [
        "def count_char_frequency(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency"
    ],
    "Write a python function to sort a list according to the second element in sublist.": [
        "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])"
    ],
    "Write a python function to check whether the triangle is valid or not if sides are given.": [
        "def is_valid_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n# Example usage:\n# print(is_valid_triangle(3, 4, 5))  # True\n# print(is_valid_triangle(1, 2, 3))  # False"
    ],
    "Write a function to find the sum of arithmetic progression.": [
        "def sum_of_arithmetic_progression(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) // 2"
    ],
    "Write a function to check whether the given month name contains 28 days or not.": [
        "def has_28_days(month):\n    return month.lower() == \"february\""
    ],
    "Write a function that matches a word at the end of a string, with optional punctuation.": [
        "import re\n\ndef match_word_at_end(text):\n    pattern = r'\\b\\w+\\b[.,!?]*$'\n    match = re.search(pattern, text)\n    return match.group() if match else None"
    ],
    "Write a python function to count the number of substrings with same first and last characters.": [
        "def count_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count"
    ],
    "Write a python function to find the maximum occuring divisor in an interval.": [
        "def max_occuring_divisor(L, R):\n    max_count = 0\n    max_divisor = -1\n    for d in range(1, int(R**0.5) + 2):\n        count = 0\n        for i in range(L, R + 1):\n            if i % d == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = d\n    return max_divisor"
    ],
    "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.": [
        "def sum_of_three_lowest_positives(numbers):\n    positives = [num for num in numbers if num > 0]\n    positives.sort()\n    return sum(positives[:3]) if len(positives) >= 3 else sum(positives)"
    ],
    "Write a function to convert the given set into ordered tuples.": [
        "def convert_set_to_ordered_tuples(input_set):\n    return sorted(input_set)"
    ],
    "Write a function to find the smallest range that includes at-least one element from each of the given arrays.": [
        "import heapq\n\ndef smallestRange(arrays):\n    # Initialize variables\n    min_range = float('inf')\n    max_elem = float('-inf')\n    current_min_range = float('inf')\n    \n    # Min-heap to keep track of the smallest elements\n    min_heap = []\n    \n    # Push the first element of each array into the heap\n    for i, arr in enumerate(arrays):\n        heapq.heappush(min_heap, (arr[0], 0, i))\n        max_elem = max(max_elem, arr[0])\n    \n    # Iterate until one of the arrays is exhausted\n    while len(min_heap) == len(arrays):\n        min_elem, col, row = heapq.heappop(min_heap)\n        \n        # Update the current range\n        current_min_range = max_elem - min_elem\n        \n        # Update the smallest range found so far\n        if current_min_range < min_range:\n            min_range = current_min_range\n            result = [min_elem, max_elem]\n        \n        # Move to the next element in the same array\n        if col + 1 < len(arrays[row]):\n            next_elem = arrays[row][col + 1]\n            heapq.heappush(min_heap, (next_elem, col + 1, row))\n            max_elem = max(max_elem, next_elem)\n    \n    return result"
    ],
    "Write a function to calculate the number of digits and letters in a string.": [
        "def count_digits_and_letters(s):\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n# Example usage:\ns = \"Hello World! 123\"\ndigits, letters = count_digits_and_letters(s)\nprint(f\"Digits: {digits}, Letters: {letters}\")"
    ],
    "Write a python function to find number of elements with odd factors in a given range.": [
        "import math\n\ndef count_odd_factors(n):\n    return int(math.sqrt(n))\n\ndef count_elements_with_odd_factors(l, r):\n    return count_odd_factors(r) - count_odd_factors(l - 1)\n\n# Example usage:\nl = 5\nr = 10\nprint(count_elements_with_odd_factors(l, r))"
    ],
    "Write a function to find the difference between two consecutive numbers in a given list.": [
        "def find_consecutive_differences(numbers):\n    return [numbers[i+1] - numbers[i] for i in range(len(numbers)-1)]"
    ],
    "Write a function to find entringer number e(n, k).": [
        "def entringer_number(n, k):\n    if k == 0:\n        return 1\n    elif k % 2 == 1:\n        return entringer_number(n + 1, (k - 1) // 2)\n    else:\n        return entringer_number(n - 1, k // 2 - 1) + entringer_number(n, k // 2)"
    ],
    "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.": [
        "from itertools import product\n\ndef count_sequences(length, values):\n    def has_non_negative_prefix_sums(sequence):\n        prefix_sum = 0\n        for num in sequence:\n            prefix_sum += num\n            if prefix_sum < 0:\n                return False\n        return True\n\n    valid_sequences_count = 0\n    for sequence in product(values, repeat=length):\n        if has_non_negative_prefix_sums(sequence):\n            valid_sequences_count += 1\n\n    return valid_sequences_count"
    ],
    "Write a python function to check whether the given string is a binary string or not.": [
        "def is_binary_string(s):\n    return all(char in '01' for char in s)"
    ],
    "Write a python function to minimize the length of the string by removing occurrence of only one character.": [
        "def minimize_string_length(s):\n    from collections import Counter\n    char_count = Counter(s)\n    return len(s) - max(char_count.values())"
    ],
    "Write a python function to find the first element occurring k times in a given array.": [
        "def first_element_k_times(arr, k):\n    count_map = {}\n    for num in arr:\n        if num in count_map:\n            count_map[num] += 1\n        else:\n            count_map[num] = 1\n    \n    for num in arr:\n        if count_map[num] == k:\n            return num\n    \n    return -1"
    ],
    "Write a python function to check whether all the characters in a given string are unique.": [
        "def are_characters_unique(s):\n    return len(set(s)) == len(s)"
    ],
    "Write a function to remove a specified column from a given nested list.": [
        "def remove_column(nested_list, col_index):\n    return [row[:col_index] + row[col_index+1:] for row in nested_list]"
    ],
    "Write a function to find t-nth term of arithemetic progression.": [
        "def nth_term_ap(a, n, d):\n    return a + (n - 1) * d"
    ],
    "Write a python function to count the number of rectangles in a circle of radius r.": [
        "import math\n\ndef count_rectangles_in_circle(r):\n    def is_point_in_circle(x, y):\n        return x**2 + y**2 <= r**2\n\n    count = 0\n    for i in range(-r, r + 1):\n        for j in range(-r, r + 1):\n            if is_point_in_circle(i, j) and is_point_in_circle(i+1, j) and is_point_in_circle(i, j+1) and is_point_in_circle(i+1, j+1):\n                count += 1\n    return count"
    ],
    "Write a function to find the third angle of a triangle using two angles.": [
        "def find_third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)"
    ],
    "Write a function to find the maximum element of all the given tuple records.": [
        "def max_tuple_elements(tuples_list):\n    return max(max(t) for t in tuples_list)"
    ],
    "Write a function to find modulo division of two lists using map and lambda function.": [
        "def list_modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y if y != 0 else 'undefined', list1, list2))"
    ],
    "Write a python function to check whether one root of the quadratic equation is twice of the other or not.": [
        "def is_one_root_twice_other(a, b, c):\n    if (2 * b * b == 9 * a * c):\n        return True\n    else:\n        return False"
    ],
    "Write a function to find the n\u2019th carol number.": [
        "def carol_number(n):\n    return (2 ** n - 1) ** 2 - 2"
    ],
    "Write a function to remove empty lists from a given list of lists.": [
        "def remove_empty_lists(list_of_lists):\n    return [sublist for sublist in list_of_lists if sublist]"
    ],
    "Write a python function to find the item with maximum occurrences in a given list.": [
        "def max_occurrences(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return count.most_common(1)[0][0]"
    ],
    "Write a function to add the k elements to each element in the tuple.": [
        "def add_k_to_tuple_elements(tup, k):\n    return tuple(x + k for x in tup)"
    ],
    "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.": [
        "def flip_string(s):\n    def count_flips(start_char):\n        flips = 0\n        for char in s:\n            if char != start_char:\n                flips += 1\n            start_char = '1' if start_char == '0' else '0'\n        return flips\n\n    return min(count_flips('0'), count_flips('1'))\n\n# Example usage:\n# print(flip_string(\"1101\"))  # Output: 2"
    ],
    "Write a python function to count the number of digits of a given number.": [
        "def count_digits(number):\n    return len(str(abs(number)))"
    ],
    "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.": [
        "def largest_adjacent_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
    ],
    "Write a function to check if a binary tree is balanced or not.": [
        "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_balanced(root: TreeNode) -> bool:\n    def height_and_balance(node: TreeNode):\n        if not node:\n            return 0, True\n        left_height, left_balanced = height_and_balance(node.left)\n        right_height, right_balanced = height_and_balance(node.right)\n        balanced = (left_balanced and right_balanced) and abs(left_height - right_height) <= 1\n        return max(left_height, right_height) + 1, balanced\n    _, balanced = height_and_balance(root)\n    return balanced"
    ],
    "Write a function to repeat the given tuple n times.": [
        "def repeat_tuple(t, n):\n    return t * n"
    ],
    "Write a function to find the lateral surface area of cuboid": [
        "def lateral_surface_area_of_cuboid(length, width, height):\n    return 2 * height * (length + width)"
    ],
    "Write a function to sort a tuple by its float element.": [
        "def sort_tuple_by_float(tup):\n    return sorted(tup, key=lambda x: x[1])\n\n# Example usage:\n# result = sort_tuple_by_float(((1, 2.5), (2, 1.3), (3, 3.8)))\n# print(result)  # Output: [(2, 1.3), (1, 2.5), (3, 3.8)]"
    ],
    "Write a function to find the smallest missing element in a sorted array.": [
        "def find_smallest_missing_element(arr):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    ],
    "Write a function to sort a given list of elements in ascending order using heap queue algorithm.": [
        "import heapq\n\ndef heap_sort(arr):\n    heapq.heapify(arr)\n    sorted_arr = [heapq.heappop(arr) for _ in range(len(arr))]\n    return sorted_arr"
    ],
    "Write a function to find the volume of a cuboid.": [
        "def volume_of_cuboid(length, width, height):\n    return length * width * height"
    ],
    "Write a function to print all permutations of a given string including duplicates.": [
        "def permute(s):\n    def backtrack(path, options):\n        if not options:\n            result.append(''.join(path))\n            return\n        for i in range(len(options)):\n            if i > 0 and options[i] == options[i - 1]:\n                continue\n            backtrack(path + [options[i]], options[:i] + options[i+1:])\n\n    s = ''.join(sorted(s))\n    result = []\n    backtrack([], list(s))\n    return result\n\n# Example usage:\n# print(permute(\"aabc\"))"
    ],
    "Write a function to round the given number to the nearest multiple of a specific number.": [
        "def round_to_nearest_multiple(number, multiple):\n    return round(number / multiple) * multiple"
    ],
    "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.": [
        "def remove_duplicates_with_custom_value(tuples_list, custom_value):\n    seen = set()\n    result = []\n    for item in tuples_list:\n        if item in seen:\n            result.append(custom_value)\n        else:\n            seen.add(item)\n            result.append(item)\n    return result"
    ],
    "Write a python function to remove all occurrences of a character in a given string.": [
        "def remove_character(string, char):\n    return string.replace(char, '')"
    ],
    "Write a python function to shift last element to first position in the given list.": [
        "def shift_last_to_first(lst):\n    if not lst:\n        return lst\n    last_element = lst.pop()\n    lst.insert(0, last_element)\n    return lst"
    ],
    "Write a function to find the surface area of a cuboid.": [
        "def surface_area_of_cuboid(length, width, height):\n    return 2 * (length * width + width * height + height * length)"
    ],
    "Write a function to generate a two-dimensional array.": [
        "def generate_2d_array(rows, cols, value=0):\n    return [[value for _ in range(cols)] for _ in range(rows)]"
    ],
    "Write a function to sort a list of lists by a given index of the inner list.": [
        "def sort_list_of_lists(lists, index):\n    return sorted(lists, key=lambda x: x[index])"
    ],
    "Write a function to find the number of rotations in a circularly sorted array.": [
        "def find_rotations(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_index = (mid + 1) % len(arr)\n        prev_index = (mid - 1 + len(arr)) % len(arr)\n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0"
    ],
    "Write a python function to toggle all odd bits of a given number.": [
        "def toggle_odd_bits(n):\n    result = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            result = result | (1 << count)\n        count += 1\n        temp = temp >> 1\n    return n ^ result"
    ],
    "Write a python function to find the frequency of the smallest value in a given array.": [
        "def frequency_of_smallest(arr):\n    if not arr:\n        return 0\n    min_val = min(arr)\n    return arr.count(min_val)\n\n# Example usage:\n# arr = [3, 1, 4, 1, 5, 9, 1]\n# print(frequency_of_smallest(arr))  # Output: 3"
    ],
    "Write a function to find the n'th perrin number using recursion.": [
        "def perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin(n - 2) + perrin(n - 3)"
    ],
    "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.": [
        "def min_swaps_to_balance_brackets(s):\n    n = len(s)\n    open_count = 0\n    close_count = 0\n    swaps = 0\n\n    for i in range(n):\n        if s[i] == '(':\n            open_count += 1\n        else:\n            close_count += 1\n\n        if close_count > open_count:\n            swaps += (close_count - open_count) // 2\n            open_count = close_count\n\n    return swaps\n\n# Example usage:\ns = \"())(()\"\nprint(min_swaps_to_balance_brackets(s))  # Output: 1"
    ],
    "Write a python function to check whether the hexadecimal number is even or odd.": [
        "def is_hex_even_or_odd(hex_num):\n    # Remove the '0x' prefix if present\n    if hex_num.startswith('0x') or hex_num.startswith('0X'):\n        hex_num = hex_num[2:]\n    \n    # Get the last character of the hexadecimal number\n    last_char = hex_num[-1]\n    \n    # Check if the last character is one of the even digits in hexadecimal\n    if last_char in '02468ACE':\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nhex_number = \"1A3F\"\nprint(is_hex_even_or_odd(hex_number))  # Output: Odd"
    ],
    "Write a python function to find the highest power of 2 that is less than or equal to n.": [
        "def highest_power_of_2(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return 1 << (power - 1)"
    ],
    "Write a function to find the n'th lucas number.": [
        "def lucas_number(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas_number(n - 1) + lucas_number(n - 2)"
    ],
    "Write a function to insert a given string at the beginning of all items in a list.": [
        "def insert_string_at_beginning(lst, string):\n    return [string + item for item in lst]\n\n# Example usage:\n# my_list = ['apple', 'banana', 'cherry']\n# result = insert_string_at_beginning(my_list, 'fruit_')\n# print(result)  # Output: ['fruit_apple', 'fruit_banana', 'fruit_cherry']"
    ],
    "Write a function to convert more than one list to nested dictionary.": [
        "def lists_to_nested_dict(lists):\n    def build_dict(keys, value):\n        result = {}\n        key = keys.pop(0)\n        if keys:\n            result[key] = build_dict(keys, value)\n        else:\n            result[key] = value\n        return result\n\n    if not lists or not all(lists):\n        raise ValueError(\"All lists must be non-empty\")\n    \n    if len(set(map(len, lists))) != 1:\n        raise ValueError(\"All lists must have the same length\")\n    \n    result = {}\n    for i in range(len(lists[0])):\n        keys = [lst[i] for lst in lists[:-1]]\n        value = lists[-1][i]\n        current_level = result\n        for key in keys:\n            if key not in current_level:\n                current_level[key] = {}\n            current_level = current_level[key]\n        current_level[keys[-1]] = value\n    return result"
    ],
    "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).": [
        "def max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    memo[n] = max((max_sum(n//2, memo) + max_sum(n//3, memo) + max_sum(n//4, memo) + max_sum(n//5, memo)), n)\n    return memo[n]"
    ],
    "Write a function to find the list with maximum length using lambda function.": [
        "def max_length_list(lists):\n    return max(lists, key=lambda x: len(x))"
    ],
    "Write a function to check if given tuple is distinct or not.": [
        "def is_distinct(tup):\n    return len(tup) == len(set(tup))"
    ],
    "Write a python function to find the first non-repeated character in a given string.": [
        "def first_non_repeated_character(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    ],
    "Write a function to check whether the given string starts and ends with the same character or not using regex.": [
        "import re\n\ndef starts_ends_same(s):\n    pattern = r'^[a-zA-Z].*\\1$'\n    return bool(re.match(pattern, s))\n\n# Example usage:\n# print(starts_ends_same(\"radar\"))  # Output: True\n# print(starts_ends_same(\"hello\"))  # Output: False"
    ],
    "Write a function to find the median of three specific numbers.": [
        "def find_median_of_three(a, b, c):\n    if (a > b and a < c) or (a < b and a > c):\n        return a\n    elif (b > a and b < c) or (b < a and b > c):\n        return b\n    else:\n        return c"
    ],
    "Write a function to compute the sum of digits of each number of a given list.": [
        "def sum_of_digits(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return [digit_sum(num) for num in numbers]\n\n# Example usage:\nnumbers = [123, 456, 789]\nprint(sum_of_digits(numbers))  # Output: [6, 15, 24]"
    ],
    "Write a function to perform the mathematical bitwise xor operation across the given tuples.": [
        "def bitwise_xor_tuples(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))"
    ],
    "Write a function to extract the frequency of unique tuples in the given list order irrespective.": [
        "from collections import Counter\n\ndef tuple_frequency(tuples_list):\n    normalized_tuples = [tuple(sorted(t)) for t in tuples_list]\n    frequency = Counter(normalized_tuples)\n    return dict(frequency)\n\n# Example usage:\n# tuples_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\n# print(tuple_frequency(tuples_list))\n# Output: {(1, 2): 2, (3, 4): 2, (5, 6): 1}"
    ],
    "Write a function to perform index wise addition of tuple elements in the given two nested tuples.": [
        "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for sub1, sub2 in zip(tuple1, tuple2):\n        result.append(tuple(a + b for a, b in zip(sub1, sub2)))\n    return tuple(result)"
    ],
    "Write a function to compute the value of ncr%p.": [
        "def mod_ncr(n, r, p):\n    def power(x, y, p):\n        res = 1\n        x = x % p\n        while y > 0:\n            if (y & 1) == 1:\n                res = (res * x) % p\n            y = y >> 1\n            x = (x * x) % p\n        return res\n\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    fac = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fac[i] = fac[i - 1] * i % p\n    return (fac[n] * power(fac[r], p - 2, p) % p * power(fac[n - r], p - 2, p) % p) % p"
    ],
    "Write a function to check if a url is valid or not using regex.": [
        "import re\n\ndef is_valid_url(url):\n    pattern = r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(:[0-9]+)?(/.*)?$'\n    return bool(re.match(pattern, url))"
    ],
    "Write a python function to find the minimum of two numbers.": [
        "def find_minimum(a, b):\n    return min(a, b)"
    ],
    "Write a function to check whether an element exists within a tuple.": [
        "def element_exists_in_tuple(element, tuple_data):\n    return element in tuple_data"
    ],
    "Write a python function to find the parity of a given number.": [
        "def find_parity(number):\n    return \"Even\" if number % 2 == 0 else \"Odd\""
    ],
    "Write a function to create the next bigger number by rearranging the digits of a given number.": [
        "def next_bigger_number(n):\n    nums = list(str(n))\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    if i == -1:\n        return -1\n    j = len(nums) - 1\n    while nums[j] <= nums[i]:\n        j -= 1\n    nums[i], nums[j] = nums[j], nums[i]\n    nums[i + 1:] = reversed(nums[i + 1:])\n    return int(''.join(nums))\n\n# Example usage:\n# print(next_bigger_number(1234))  # Output: 1243\n# print(next_bigger_number(4321))  # Output: -1"
    ],
    "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.": [
        "def k_pairs(arr1, arr2, k):\n    result = []\n    arr1.sort()\n    arr2.sort()\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2) and len(result) < k:\n        result.append((arr1[i], arr2[j]))\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return result"
    ],
    "Write a function to find the minimum product from the pairs of tuples within a given list.": [
        "def min_product_from_pairs(pairs_list):\n    return min(a * b for a, b in pairs_list)"
    ],
    "Write a function to find the minimum value in a given heterogeneous list.": [
        "def find_minimum_value(heterogeneous_list):\n    numeric_values = [x for x in heterogeneous_list if isinstance(x, (int, float))]\n    if numeric_values:\n        return min(numeric_values)\n    else:\n        raise ValueError(\"No numeric values found in the list\")"
    ],
    "Write a function to convert the given snake case string to camel case string by using regex.": [
        "import re\n\ndef snake_to_camel(snake_str):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), snake_str)"
    ],
    "Write a python function to remove odd numbers from a given list.": [
        "def remove_odd_numbers(lst):\n    return [num for num in lst if num % 2 == 0]"
    ],
    "Write a function to extract the nth element from a given list of tuples.": [
        "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]"
    ],
    "Write a python function to check whether the value exists in a sequence or not.": [
        "def value_exists(sequence, value):\n    return value in sequence"
    ],
    "Write a python function to find a pair with highest product from a given array of integers.": [
        "def max_product_pair(arr):\n    if len(arr) < 2:\n        return None\n    \n    arr.sort()\n    n = len(arr)\n    \n    return max(arr[0] * arr[1], arr[n-1] * arr[n-2])\n\n# Example usage:\narr = [1, 10, -5, 1, -100]\nprint(max_product_pair(arr))  # Output: 500"
    ],
    "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.": [
        "def max_sum_divide(n):\n    if n < 12:\n        return n\n    return max(n, max_sum_divide(n // 2) + max_sum_divide(n // 3) + max_sum_divide(n // 4))\n\n# Example usage:\n# print(max_sum_divide(12))  # Output: 13\n# print(max_sum_divide(24))  # Output: 27"
    ],
    "Write a function to find common first element in given list of tuple.": [
        "def common_first_element(tuples_list):\n    if not tuples_list:\n        return None\n    first_elements = set(t[0] for t in tuples_list)\n    if len(first_elements) == 1:\n        return first_elements.pop()\n    else:\n        return None"
    ],
    "Write a python function to find the sublist having maximum length.": [
        "def max_length_sublist(list_of_lists):\n    return max(list_of_lists, key=len)"
    ],
    "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.": [
        "def process_numbers(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    print(result)\n\n# Example usage:\n# process_numbers([1.2, 2.5, 3.7])"
    ],
    "Write a python function to find the cube sum of first n even natural numbers.": [
        "def cube_sum_of_even_numbers(n):\n    return sum((2*i)**3 for i in range(1, n+1))"
    ],
    "Write a function to concatenate each element of tuple by the delimiter.": [
        "def concatenate_tuple_elements(input_tuple, delimiter):\n    return delimiter.join(map(str, input_tuple))\n\n# Example usage:\n# result = concatenate_tuple_elements(('apple', 'banana', 'cherry'), '-')\n# print(result)  # Output: apple-banana-cherry"
    ],
    "Write a python function to find the average of cubes of first n natural numbers.": [
        "def average_of_cubes(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n\n\n# Example usage:\n# print(average_of_cubes(5))"
    ],
    "Write a function to solve gold mine problem.": [
        "def get_max_gold(gold):\n    if not gold or not gold[0]:\n        return 0\n    \n    n = len(gold)\n    m = len(gold[0])\n    \n    table = [[0 for _ in range(m)] for _ in range(n)]\n    \n    for col in range(m-1, -1, -1):\n        for row in range(n):\n            right = table[row][col+1] if col < m-1 else 0\n            right_up = table[row-1][col+1] if row > 0 and col < m-1 else 0\n            right_down = table[row+1][col+1] if row < n-1 and col < m-1 else 0\n            \n            table[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    max_gold = 0\n    for i in range(n):\n        max_gold = max(max_gold, table[i][0])\n    \n    return max_gold"
    ],
    "Write a function to extract only the rear index element of each string in the given tuple.": [
        "def extract_rear_elements(strings_tuple):\n    return tuple(s[-1] for s in strings_tuple)"
    ],
    "Write a function to count the number of sublists containing a particular element.": [
        "def count_sublists_with_element(list_of_lists, element):\n    count = 0\n    for sublist in list_of_lists:\n        if element in sublist:\n            count += 1\n    return count"
    ],
    "Write a function to filter odd numbers using lambda function.": [
        "def filter_odd_numbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))"
    ],
    "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.": [
        "import re\n\ndef convert_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)"
    ],
    "Write a function to sort the given array by using shell sort.": [
        "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n# Example usage:\n# arr = [12, 34, 54, 2, 3]\n# shell_sort(arr)\n# print(arr)"
    ],
    "Write a function to extract the elementwise and tuples from the given two tuples.": [
        "def extract_elements(tuple1, tuple2):\n    elementwise_sum = tuple(a + b for a, b in zip(tuple1, tuple2))\n    return elementwise_sum\n\n# Example usage:\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nresult = extract_elements(tuple1, tuple2)\nprint(result)  # Output: (5, 7, 9)"
    ],
    "Write a function to find the directrix of a parabola.": [
        "def find_directrix(a, b, c):\n    if a == 0:\n        return \"Not a parabola\"\n    x_vertex = -b / (2 * a)\n    y_vertex = c - ((b ** 2) / (4 * a))\n    directrix = y_vertex - (1 / (4 * a))\n    return directrix"
    ],
    "Write a function that takes two lists and returns true if they have at least one common element.": [
        "def have_common_element(list1, list2):\n    return set(list1) & set(list2)"
    ],
    "Write a function to find the median of a trapezium.": [
        "def trapezium_median(base1, base2):\n    return (base1 + base2) / 2"
    ],
    "Write a function to check whether the entered number is greater than the elements of the given array.": [
        "def is_greater_than_array(num, arr):\n    return all(num > x for x in arr)"
    ],
    "Write a function that matches a string that has an a followed by one or more b's.": [
        "import re\n\ndef match_ab_sequence(string):\n    pattern = r'ab+'\n    return re.search(pattern, string) is not None"
    ],
    "Write a python function to find the last digit of a given number.": [
        "def last_digit(number):\n    return abs(number) % 10"
    ],
    "Write a python function to print negative numbers in a list.": [
        "def print_negative_numbers(numbers):\n    for num in numbers:\n        if num < 0:\n            print(num)\n\n# Example usage:\nnumbers_list = [10, -1, 2, -3, 4, -5]\nprint_negative_numbers(numbers_list)"
    ],
    "Write a function to remove odd characters in a string.": [
        "def remove_odd_characters(s):\n    return s[::2]"
    ],
    "Write a function to count bidirectional tuple pairs.": [
        "def count_bidirectional_pairs(pairs):\n    pair_set = set()\n    count = 0\n    for a, b in pairs:\n        if (b, a) in pair_set:\n            count += 1\n            pair_set.remove((b, a))\n        else:\n            pair_set.add((a, b))\n    return count"
    ],
    "Write a function to convert a list of multiple integers into a single integer.": [
        "def list_to_single_integer(int_list):\n    return int(''.join(map(str, int_list)))"
    ],
    "Write a function to find all adverbs and their positions in a given sentence.": [
        "import re\n\ndef find_adverbs_and_positions(sentence):\n    adverbs = re.findall(r'\\b\\w+ly\\b', sentence)\n    positions = [(m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', sentence)]\n    return list(zip(adverbs, positions))\n\n# Example usage:\nsentence = \"She quickly and quietly left the room.\"\nadverbs_with_positions = find_adverbs_and_positions(sentence)\nprint(adverbs_with_positions)"
    ],
    "Write a function to find the surface area of a cube.": [
        "def surface_area_of_cube(side_length):\n    return 6 * (side_length ** 2)"
    ],
    "Write a function to find the ration of positive numbers in an array of integers.": [
        "def ratio_of_positive_numbers(arr):\n    if not arr:\n        return 0\n    \n    positive_count = sum(1 for num in arr if num > 0)\n    return positive_count / len(arr)"
    ],
    "Write a python function to find the largest negative number from the given list.": [
        "def largest_negative_number(nums):\n    # Filter out the negative numbers from the list\n    negative_nums = [num for num in nums if num < 0]\n    \n    # Return the largest negative number if the list is not empty, otherwise return None\n    return max(negative_nums) if negative_nums else None"
    ],
    "Write a function to trim each tuple by k in the given tuple list.": [
        "def trim_tuples_by_k(tuple_list, k):\n    return [t[k:] for t in tuple_list]"
    ],
    "Write a function to perform index wise multiplication of tuple elements in the given two tuples.": [
        "def multiply_tuples(tuple1, tuple2):\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Example usage:\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nprint(multiply_tuples(tuple1, tuple2))  # Output: (4, 10, 18)"
    ],
    "Write a python function to count the occurence of all elements of list in a tuple.": [
        "def count_occurrences(input_list, input_tuple):\n    return {item: input_tuple.count(item) for item in input_list}"
    ],
    "Write a function to find cubes of individual elements in a list using lambda function.": [
        "def cube_elements(lst):\n    return list(map(lambda x: x**3, lst))"
    ],
    "Write a function to calculate the sum of perrin numbers.": [
        "def sum_perrin_numbers(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 7\n    \n    p0, p1, p2 = 3, 0, 2\n    total_sum = p0 + p1 + p2\n    \n    for _ in range(3, n + 1):\n        p_next = p0 + p1\n        total_sum += p_next\n        p0, p1, p2 = p1, p2, p_next\n    \n    return total_sum"
    ],
    "Write a python function to check whether the triangle is valid or not if 3 points are given.": [
        "def is_valid_triangle(p1, p2, p3):\n    x1, y1 = p1\n    x2, y2 = p2\n    x3, y3 = p3\n    \n    # Calculate the area of the triangle using determinant method\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    \n    return area > 0"
    ],
    "Write a function to extract specified size of strings from a give list of string values.": [
        "def extract_strings_of_size(strings, size):\n    return [s for s in strings if len(s) == size]"
    ],
    "Write a function to remove all whitespaces from the given string using regex.": [
        "import re\n\ndef remove_whitespaces(input_string):\n    return re.sub(r'\\s+', '', input_string)"
    ],
    "Write a function that gives loss amount if the given amount has loss else return none.": [
        "def calculate_loss(amount, cost_price):\n    if amount < cost_price:\n        return cost_price - amount\n    else:\n        return None"
    ],
    "Write a python function to find the sum of even factors of a number.": [
        "def sum_even_factors(n): \n    res = 1 if (n % 2 == 0) else 0\n    i = 2\n    while i <= n // i: \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0: \n            count += 1\n            n //= i \n            if i == 2 and count == 1: \n                curr_sum = 0\n            curr_term *= i \n            curr_sum += curr_term  \n        res *= curr_sum  \n        i += 1 \n    if n >= 2: \n        res *= (1 + n) \n    return res"
    ],
    "Write a function that matches a word containing 'z'.": [
        "import re\n\ndef match_word_with_z(word):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.match(pattern, word))\n\n# Example usage:\n# print(match_word_with_z(\"buzz\"))  # True\n# print(match_word_with_z(\"apple\")) # False"
    ],
    "Write a function to check whether the given month number contains 31 days or not.": [
        "def has_31_days(month):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31_days"
    ],
    "Write a function to reverse strings in a given list of string values.": [
        "def reverse_strings_in_list(string_list):\n    return [s[::-1] for s in string_list]\n\n# Example usage:\n# input_list = [\"hello\", \"world\", \"python\"]\n# output_list = reverse_strings_in_list(input_list)\n# print(output_list)  # Output: ['olleh', 'dlrow', 'nohtyp']"
    ],
    "Write a python function to find the sublist having minimum length.": [
        "def find_min_length_sublist(list_of_lists):\n    if not list_of_lists:\n        return None\n    min_length = min(len(sublist) for sublist in list_of_lists)\n    for sublist in list_of_lists:\n        if len(sublist) == min_length:\n            return sublist"
    ],
    "Write a function to find the area of a rectangle.": [
        "def rectangle_area(length, width):\n    return length * width"
    ],
    "Write a function to remove uppercase substrings from a given string by using regex.": [
        "import re\n\ndef remove_uppercase_substrings(input_string):\n    return re.sub(r'[A-Z]+', '', input_string)"
    ],
    "Write a python function to get the first element of each sublist.": [
        "def get_first_elements(lst):\n    return [sublist[0] for sublist in lst if sublist]"
    ],
    "Write a python function to count the upper case characters in a given string.": [
        "def count_upper_case(s):\n    return sum(1 for c in s if c.isupper())"
    ],
    "Write a function to find all possible combinations of the elements of a given list.": [
        "from itertools import chain, combinations\n\ndef all_combinations(lst):\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst)+1)))\n\n# Example usage:\n# print(all_combinations([1, 2, 3]))"
    ],
    "Write a function to find the maximum product subarray of the given array.": [
        "def maxProduct(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result"
    ],
    "Write a function to check if all values are same in a dictionary.": [
        "def all_values_same(dictionary):\n    values = list(dictionary.values())\n    return len(set(values)) == 1"
    ],
    "Write a function to drop empty items from a given dictionary.": [
        "def drop_empty_items(input_dict):\n    return {k: v for k, v in input_dict.items() if v}"
    ],
    "Write a function to find the peak element in the given array.": [
        "def find_peak_element(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    return left"
    ],
    "Write a python function to convert decimal number to octal number.": [
        "def decimal_to_octal(decimal_number):\n    return oct(decimal_number)[2:]"
    ],
    "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.": [
        "def maxProductIncreasingSubsequence(nums):\n    n = len(nums)\n    dp = nums[:]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] * nums[i])\n    \n    return max(dp)"
    ],
    "Write a function to find the maximum profit earned from a maximum of k stock transactions": [
        "def maxProfit(k, prices):\n    if not prices:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n    \n    dp = [[0] * n for _ in range(k + 1)]\n    \n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i-1][j] - prices[j])\n    \n    return dp[k][n-1]"
    ],
    "Write a function to find the pairwise addition of the elements of the given tuples.": [
        "def pairwise_addition(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))\n\n# Example usage:\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nresult = pairwise_addition(tuple1, tuple2)\nprint(result)  # Output: (5, 7, 9)"
    ],
    "Write a python function to find remainder of array multiplication divided by n.": [
        "def array_multiplication_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    ],
    "Write a python function to check whether the given list contains consecutive numbers or not.": [
        "def has_consecutive_numbers(lst):\n    return sorted(lst) == list(range(min(lst), max(lst) + 1))"
    ],
    "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.": [
        "def tuple_intersection(tuple_list):\n    from itertools import permutations\n    result = set(tuple(sorted(tup)) for tup in tuple_list[0])\n    for tup in tuple_list[1:]:\n        current_tups = {tuple(sorted(t)) for t in tup}\n        result.intersection_update(current_tups)\n    return [tuple(t) for t in result]"
    ],
    "Write a function to replace characters in a string.": [
        "def replace_characters(s, old_char, new_char):\n    return s.replace(old_char, new_char)"
    ],
    "Write a function to sort counter by value.": [
        "from collections import Counter\n\ndef sort_counter_by_value(counter):\n    return Counter({k: v for k, v in sorted(counter.items(), key=lambda item: item[1])})"
    ],
    "Write a python function to find the sum of the largest and smallest value in a given array.": [
        "def sum_of_largest_and_smallest(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)"
    ],
    "Write a python function to convert the given string to lower case.": [
        "def to_lowercase(s):\n    return s.lower()"
    ],
    "Write a function to remove lowercase substrings from a given string.": [
        "import re\n\ndef remove_lowercase_substrings(input_string):\n    return re.sub('[a-z]+', '', input_string)"
    ],
    "Write a python function to find the first digit of a given number.": [
        "def first_digit(n):\n    n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n"
    ],
    "Write a python function to find the maximum occurring character in a given string.": [
        "def max_occurring_char(s):\n    from collections import Counter\n    char_count = Counter(s)\n    max_char = max(char_count, key=char_count.get)\n    return max_char"
    ],
    "Write a function to determine if there is a subset of the given set with sum equal to the given sum.": [
        "def is_subset_sum(set, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    ],
    "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.": [
        "import re\n\ndef find_sequences(s):\n    pattern = r'[A-Z][a-z]+'\n    return re.findall(pattern, s)"
    ],
    "Write a python function to find the first natural number whose factorial is divisible by x.": [
        "def first_factorial_divisible_by_x(x):\n    factorial = 1\n    n = 1\n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1"
    ],
    "Write a function to remove the matching tuples from the given two tuples.": [
        "def remove_matching_tuples(tuple1, tuple2):\n    result = []\n    for item in tuple1:\n        if item not in tuple2:\n            result.append(item)\n    return tuple(result)\n\n# Example usage\ntuple1 = (1, 2, 3, 4, 5)\ntuple2 = (3, 4, 5, 6, 7)\nprint(remove_matching_tuples(tuple1, tuple2))  # Output: (1, 2)"
    ],
    "Write a function to find the largest palindromic number in the given array.": [
        "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef largest_palindrome(nums):\n    max_palindrome = -1\n    for num in nums:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome\n\n# Example usage:\n# nums = [123, 121, 45654, 78987, 12321]\n# print(largest_palindrome(nums))  # Output: 78987"
    ],
    "Write a function to compute binomial probability for the given number.": [
        "import math\n\ndef binomial_probability(n, k, p):\n    return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))"
    ],
    "Write a function to sort a list of tuples in increasing order by the last element in each tuple.": [
        "def last(n):\n    return n[-1]\n\ndef sort_list_of_tuples(tuples):\n    return sorted(tuples, key=last)"
    ],
    "Write a function to find the area of a pentagon.": [
        "import math\n\ndef pentagon_area(side_length):\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * side_length ** 2) / 4\n    return area"
    ],
    "Write a python function to find the frequency of the largest value in a given array.": [
        "def frequency_of_largest(arr):\n    if not arr:\n        return 0\n    max_value = max(arr)\n    return arr.count(max_value)"
    ],
    "Write a function to extract all the pairs which are symmetric in the given tuple list.": [
        "def extract_symmetric_pairs(tuple_list):\n    symmetric_pairs = [(a, b) for (a, b) in tuple_list if (b, a) in tuple_list]\n    return symmetric_pairs"
    ],
    "Write a function to find the sum of geometric progression series.": [
        "def geometric_progression_sum(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)"
    ],
    "Write a function to search an element in the given array by using binary search.": [
        "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    ],
    "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.": [
        "import math\n\ndef hexagon_grid(origin_x, origin_y, radius, cols, rows):\n    hex_height = (math.sqrt(3) / 2) * radius\n    width = 3 * radius\n    height = 2 * hex_height\n    \n    def hexagon_coordinates(cx, cy):\n        coords = []\n        for i in range(6):\n            angle_rad = math.pi / 3 * i\n            x = cx + radius * math.cos(angle_rad)\n            y = cy + radius * math.sin(angle_rad)\n            coords.append((x, y))\n        return coords\n    \n    grid = []\n    for col in range(cols):\n        for row in range(rows):\n            cx = origin_x + col * width\n            if row % 2 == 1:\n                cx += radius * 1.5\n            cy = origin_y + row * height\n            grid.append(hexagon_coordinates(cx, cy))\n    \n    return grid"
    ],
    "Write a function to convert the given binary tuple to integer.": [
        "def binary_tuple_to_integer(binary_tuple):\n    return int(''.join(str(bit) for bit in binary_tuple), 2)"
    ],
    "Write a function to remove lowercase substrings from a given string by using regex.": [
        "import re\n\ndef remove_lowercase_substrings(input_string):\n    return re.sub('[a-z]+', '', input_string)"
    ],
    "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.": [
        "import heapq\n\ndef find_smallest_integers(nums, n):\n    return heapq.nsmallest(n, nums)"
    ],
    "Write a function to find the surface area of a cone.": [
        "import math\n\ndef surface_area_of_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area"
    ],
    "Write a python function to find gcd of two positive integers.": [
        "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
    ],
    "Write a function to find the diameter of a circle.": [
        "def find_diameter(radius):\n    return 2 * radius"
    ],
    "Write a function to concatenate all elements of the given list into a string.": [
        "def concatenate_elements(elements):\n    return ''.join(elements)"
    ],
    "Write a python function to find common divisor between two numbers in a given pair.": [
        "def common_divisors(num1, num2):\n    divisors = []\n    for i in range(1, min(num1, num2) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Example usage:\nnum1 = 12\nnum2 = 18\nprint(common_divisors(num1, num2))"
    ],
    "Write a python function to find remainder of two numbers.": [
        "def find_remainder(dividend, divisor):\n    return dividend % divisor"
    ],
    "Write a function to add consecutive numbers of a given list.": [
        "def add_consecutive_numbers(numbers):\n    return [sum(numbers[:i+1]) for i in range(len(numbers))]"
    ],
    "Write a python function to find the cube sum of first n natural numbers.": [
        "def cube_sum(n):\n    return sum([i**3 for i in range(1, n+1)])"
    ],
    "Write a function to move all zeroes to the end of the given array.": [
        "def move_zeroes_to_end(arr):\n    non_zero_index = 0\n    for num in arr:\n        if num != 0:\n            arr[non_zero_index] = num\n            non_zero_index += 1\n    while non_zero_index < len(arr):\n        arr[non_zero_index] = 0\n        non_zero_index += 1"
    ],
    "Write a function to calculate the permutation coefficient of given p(n, k).": [
        "def permutation_coefficient(n, k): \n    if n < k: \n        return 0\n    res = 1\n    for i in range(n, n - k, -1): \n        res *= i \n    return res"
    ],
    "Write a function to remove specific words from a given list.": [
        "def remove_specific_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]"
    ],
    "Write a function to check if the common elements between two given lists are in the same order or not.": [
        "def check_common_order(list1, list2):\n    common_elements = set(list1) & set(list2)\n    ordered_in_list1 = [x for x in list1 if x in common_elements]\n    ordered_in_list2 = [x for x in list2 if x in common_elements]\n    return ordered_in_list1 == ordered_in_list2"
    ],
    "Write a python function to find the average of odd numbers till a given odd number.": [
        "def average_of_odds(n):\n    if n % 2 == 0:\n        return \"Please provide an odd number.\"\n    \n    total = 0\n    count = 0\n    for i in range(1, n + 1, 2):\n        total += i\n        count += 1\n    \n    return total / count"
    ],
    "Write a function to find the number of subsequences having product smaller than k for the given non negative array.": [
        "def numSubseq(arr, k):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    count = 0\n    mod = 10**9 + 7\n    \n    while left <= right:\n        if arr[left] * arr[right] < k:\n            count += pow(2, right - left, mod)\n            count %= mod\n            left += 1\n        else:\n            right -= 1\n    \n    return count"
    ],
    "Write a python function to find minimum sum of factors of a given number.": [
        "def min_sum_of_factors(n):\n    if n < 2:\n        return n\n    i = 2\n    sum_factors = 0\n    while n > 1:\n        while n % i == 0:\n            sum_factors += i\n            n //= i\n        i += 1\n    return sum_factors\n\n# Example usage:\n# print(min_sum_of_factors(18))  # Output: 5 (1 + 3 + 3)"
    ],
    "Write a function to count the element frequency in the mixed nested tuple.": [
        "def count_element_frequency(nested_tuple):\n    from collections import defaultdict\n    \n    def flatten(t):\n        for i in t:\n            if isinstance(i, tuple):\n                yield from flatten(i)\n            else:\n                yield i\n                \n    frequency = defaultdict(int)\n    for element in flatten(nested_tuple):\n        frequency[element] += 1\n        \n    return dict(frequency)\n\n# Example usage:\n# nested_tuple = ((1, 2, (3, 4)), (1, 5), (6, (2, 7)))\n# print(count_element_frequency(nested_tuple))\n# Output: {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}"
    ],
    "Write a function to convert tuple into list by adding the given string after every element.": [
        "def add_string_to_tuple_elements(input_tuple, string_to_add):\n    return [element + string_to_add for element in input_tuple]\n\n# Example usage:\n# result = add_string_to_tuple_elements(('apple', 'banana', 'cherry'), '_fruit')\n# print(result)  # Output: ['apple_fruit', 'banana_fruit', 'cherry_fruit']"
    ],
    "Write a function to find the summation of tuple elements in the given tuple list.": [
        "def sum_of_tuple_elements(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"
    ],
    "Write a function to check if there is a subset with sum divisible by m.": [
        "def subset_sum_divisible_by_m(nums, m):\n    n = len(nums)\n    dp = [False] * (1 << n)\n    dp[0] = True\n    \n    for mask in range(1, 1 << n):\n        total_sum = 0\n        for j in range(n):\n            if mask & (1 << j):\n                total_sum += nums[j]\n        \n        if total_sum % m == 0:\n            return True\n        \n        for j in range(n):\n            if mask & (1 << j):\n                new_mask = mask ^ (1 << j)\n                if dp[new_mask]:\n                    dp[mask] = True\n                    break\n    \n    return False"
    ],
    "Write a function to sort a list of elements using radix sort.": [
        "def counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(n):\n        index = (arr[i] // exp) % 10\n        count[index] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp) % 10\n        output[count[index] - 1] = arr[i]\n        count[index] -= 1\n        i -= 1\n\n    for i in range(n):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10"
    ],
    "Write a python function to find the largest postive number from the given list.": [
        "def largest_positive_number(numbers):\n    max_positive = None\n    for num in numbers:\n        if num > 0:\n            if max_positive is None or num > max_positive:\n                max_positive = num\n    return max_positive\n\n# Example usage:\nnumbers = [3, -1, 4, -5, 9, -2]\nprint(largest_positive_number(numbers))  # Output: 9"
    ],
    "Write a function to find the square root of a perfect number.": [
        "import math\n\ndef square_root_of_perfect_square(number):\n    if number < 0:\n        raise ValueError(\"The number must be non-negative\")\n    sqrt = int(math.sqrt(number))\n    if sqrt * sqrt != number:\n        raise ValueError(\"The number is not a perfect square\")\n    return sqrt\n\n# Example usage:\ntry:\n    result = square_root_of_perfect_square(16)\n    print(f\"The square root of 16 is {result}\")\nexcept ValueError as e:\n    print(e)"
    ],
    "Write a function to calculate volume of a tetrahedron.": [
        "import math\n\ndef tetrahedron_volume(a):\n    return (a ** 3) / (6 * math.sqrt(2))"
    ],
    "Write a function to find the lcm of the given array elements.": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef find_lcm(arr):\n    num1 = arr[0]\n    num2 = arr[1]\n    lcm_result = lcm(num1, num2)\n    \n    for i in range(2, len(arr)):\n        lcm_result = lcm(lcm_result, arr[i])\n        \n    return lcm_result"
    ],
    "Write a function to print check if the triangle is scalene or not.": [
        "def is_scalene(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False\n\n# Example usage:\na = 5\nb = 6\nc = 7\nif is_scalene(a, b, c):\n    print(\"The triangle is scalene.\")\nelse:\n    print(\"The triangle is not scalene.\")"
    ],
    "Write a function to find the longest bitonic subsequence for the given array.": [
        "def longest_bitonic_subsequence(arr):\n    n = len(arr)\n    \n    # Increasing subsequence lengths\n    inc = [1] * n\n    \n    # Decreasing subsequence lengths\n    dec = [1] * n\n    \n    # Compute increasing subsequence lengths\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + 1:\n                inc[i] = inc[j] + 1\n    \n    # Compute decreasing subsequence lengths\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + 1:\n                dec[i] = dec[j] + 1\n    \n    # Find the maximum length of bitonic subsequence\n    max_length = 0\n    for i in range(n):\n        max_length = max(max_length, inc[i] + dec[i] - 1)\n    \n    return max_length"
    ],
    "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.": [
        "def validate_string(s, length):\n    return (\n        any(lambda x: x.isupper(), s) and\n        any(lambda x: x.islower(), s) and\n        any(lambda x: x.isdigit(), s) and\n        len(s) == length\n    )"
    ],
    "Write a function to find the sum of maximum increasing subsequence of the given array.": [
        "def max_sum_increasing_subseq(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize msis array where msis[i] represents the sum of the maximum\n    # increasing subsequence that ends with arr[i]\n    msis = [x for x in arr]\n\n    # Compute the sum of MSIS values in bottom-up manner\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n\n    # Find the maximum value in msis array\n    return max(msis)"
    ],
    "Write a python function to check whether two given lines are parallel or not.": [
        "def are_lines_parallel(m1, m2):\n    return m1 == m2"
    ],
    "Write a python function to capitalize first and last letters of each word of a given string.": [
        "def capitalize_first_last_letters(text):\n    result = []\n    for word in text.split():\n        if len(word) > 1:\n            word = word[0].upper() + word[1:-1] + word[-1].upper()\n        else:\n            word = word.upper()\n        result.append(word)\n    return ' '.join(result)\n\n# Example usage:\ninput_string = \"hello world\"\noutput_string = capitalize_first_last_letters(input_string)\nprint(output_string)  # Output: \"HEllo WOrld\""
    ],
    "Write a function to find all pairs in an integer array whose sum is equal to a given number.": [
        "def find_pairs_with_sum(arr, target_sum):\n    pairs = []\n    num_dict = {}\n    \n    for num in arr:\n        complement = target_sum - num\n        if complement in num_dict:\n            pairs.append((complement, num))\n        num_dict[num] = True\n    \n    return pairs\n\n# Example usage:\narr = [2, 4, 3, 5, 7, 8, 1, 9]\ntarget_sum = 10\nprint(find_pairs_with_sum(arr, target_sum))"
    ],
    "Write a function to find the list of lists with minimum length.": [
        "def find_min_length_lists(list_of_lists):\n    if not list_of_lists:\n        return []\n    \n    min_length = min(len(lst) for lst in list_of_lists)\n    return [lst for lst in list_of_lists if len(lst) == min_length]"
    ],
    "Write a function to find the nth jacobsthal-lucas number.": [
        "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b"
    ],
    "Write a function to find the ration of negative numbers in an array of integers.": [
        "def ratio_of_negatives(arr):\n    if not arr:\n        return 0.0\n    negative_count = sum(1 for x in arr if x < 0)\n    return negative_count / len(arr)"
    ],
    "Write a function to find minimum number of coins that make a given value.": [
        "def min_coins(coins, m, V):\n    if V == 0:\n        return 0\n    res = float('inf')\n    for i in range(m):\n        if coins[i] <= V:\n            sub_res = min_coins(coins, m, V - coins[i])\n            if sub_res != float('inf') and sub_res + 1 < res:\n                res = sub_res + 1\n    return res\n\n# Example usage:\ncoins = [1, 2, 5]\nm = len(coins)\nV = 11\nprint(\"Minimum coins needed is\", min_coins(coins, m, V))"
    ],
    "Write a function to check if the two given strings are permutations of each other.": [
        "def are_permutations(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)"
    ],
    "Write a function to remove particular data type elements from the given tuple.": [
        "def remove_elements_by_type(input_tuple, data_type):\n    return tuple(item for item in input_tuple if not isinstance(item, data_type))"
    ],
    "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.": [
        "def search_pattern(text, pattern):\n    locations = []\n    index = 0\n    while True:\n        index = text.find(pattern, index)\n        if index == -1:\n            break\n        locations.append(index)\n        index += len(pattern)\n    return locations\n\n# Example usage:\ntext = \"hello world, hello everyone\"\npattern = \"hello\"\nlocations = search_pattern(text, pattern)\nprint(locations)  # Output: [0, 13]"
    ],
    "Write a function to find the top or bottom surface area of a cylinder.": [
        "import math\n\ndef cylinder_surface_area(radius, height, surface='top'):\n    if surface == 'top':\n        return math.pi * radius ** 2\n    elif surface == 'bottom':\n        return math.pi * radius ** 2\n    else:\n        raise ValueError(\"Surface must be 'top' or 'bottom'\")"
    ],
    "Write a function to select the nth items of a list.": [
        "def select_nth_items(lst, n):\n    return lst[n-1::n]"
    ],
    "Write a python function to find the first repeated word in a given string.": [
        "def first_repeated_word(s):\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None\n\n# Example usage:\ns = \"This is a test string and this test is simple\"\nprint(first_repeated_word(s))  # Output: \"is\""
    ],
    "Write a python function to convert a given string list to a tuple.": [
        "def string_list_to_tuple(string_list):\n    return tuple(string_list)"
    ],
    "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.": [
        "def power_of_bases(bases, exponent):\n    return list(map(lambda x: x ** exponent, bases))\n\n# Example usage:\nbases = [2, 3, 4, 5]\nexponent = 3\nresult = power_of_bases(bases, exponent)\nprint(result)  # Output: [8, 27, 64, 125]"
    ],
    "Write a python function to find the difference between highest and least frequencies in a given array.": [
        "def diff_highest_least_frequencies(arr):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    max_freq = max(frequency.values())\n    min_freq = min(frequency.values())\n    \n    return max_freq - min_freq"
    ],
    "Write a function to find if the given number is abundant or not.": [
        "def is_abundant(n):\n    sum_of_divisors = sum(i for i in range(1, n) if n % i == 0)\n    return sum_of_divisors > n"
    ],
    "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.": [
        "import re\n\ndef replace_chars(input_string):\n    return re.sub(r'[ ,.]', ':', input_string)"
    ],
    "Write a function to add two numbers and print number of digits of sum.": [
        "def add_and_count_digits(num1, num2):\n    total = num1 + num2\n    digit_count = len(str(total))\n    print(digit_count)\n\n# Example usage:\nadd_and_count_digits(123, 456)"
    ],
    "Write a function to flatten the tuple list to a string.": [
        "def flatten_tuple_list_to_string(tuple_list):\n    return ''.join(str(item) for item in tuple_list)"
    ],
    "Write a python function to toggle only first and last bits of a given number.": [
        "def toggle_first_last_bits(n):\n    if n == 0:\n        return 1\n    # Find the position of the first and last bits\n    first_bit_pos = 0\n    while (1 << first_bit_pos) & n == 0:\n        first_bit_pos += 1\n    \n    last_bit_pos = 0\n    temp = n\n    while temp > 0:\n        last_bit_pos += 1\n        temp >>= 1\n    \n    # Toggle the first and last bits\n    mask = (1 << first_bit_pos) | (1 << (last_bit_pos - 1))\n    return n ^ mask"
    ],
    "Write a function to find the last occurrence of a character in a string.": [
        "def last_occurrence(s, char):\n    return s.rfind(char)"
    ],
    "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.": [
        "def hamming_distance(x, y):\n    return bin(x ^ y).count('1')\n\ndef sum_of_hamming_distances(n):\n    total_sum = 0\n    for i in range(n):\n        total_sum += hamming_distance(i, i + 1)\n    return total_sum"
    ],
    "Write a function to find the length of the longest increasing subsequence of the given sequence.": [
        "def longest_increasing_subsequence(seq):\n    if not seq:\n        return 0\n    \n    n = len(seq)\n    lis = [1] * n\n    \n    for i in range(1, n):\n        for j in range(0, i):\n            if seq[i] > seq[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    \n    return max(lis)"
    ],
    "Write a python function to find the sum of fifth power of first n odd natural numbers.": [
        "def sum_of_fifth_power(n):\n    total = 0\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        total += odd_number ** 5\n    return total"
    ],
    "Write a python function to find the maximum element in a sorted and rotated array.": [
        "def find_max_in_rotated_array(arr):\n    low, high = 0, len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    \n    return arr[high]"
    ],
    "Write a function to extract a specified column from a given nested list.": [
        "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list if len(row) > column_index]"
    ],
    "Write a python function to check whether a given sequence is linear or not.": [
        "def is_linear(sequence):\n    if len(sequence) < 2:\n        return True\n    \n    diff = sequence[1] - sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] - sequence[i-1] != diff:\n            return False\n    return True"
    ],
    "Write a function to convert the given tuple to a floating-point number.": [
        "def tuple_to_float(t):\n    return float(''.join(map(str, t)))"
    ],
    "Write a python function to find odd numbers from a mixed list.": [
        "def find_odd_numbers(mixed_list):\n    odd_numbers = [num for num in mixed_list if isinstance(num, int) and num % 2 != 0]\n    return odd_numbers"
    ],
    "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.": [
        "def difference_sum_of_cubes(n):\n    sum_of_natural_numbers = n * (n + 1) // 2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes - sum_of_natural_numbers\n\n# Example usage:\nn = 5\nprint(difference_sum_of_cubes(n))"
    ],
    "Write a python function to count the pairs with xor as an odd number.": [
        "def count_odd_xor_pairs(arr):\n    odd_count = 0\n    even_count = 0\n    for num in arr:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    return odd_count * even_count\n\n# Example usage:\narr = [1, 2, 3, 4]\nprint(count_odd_xor_pairs(arr))  # Output: 4"
    ],
    "Write a function to toggle characters case in a string.": [
        "def toggle_case(s):\n    return s.swapcase()"
    ],
    "Write a python function to find the digit distance between two integers.": [
        "def digit_distance(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    if len(str_num1) != len(str_num2):\n        raise ValueError(\"Numbers must have the same number of digits\")\n    \n    distance = 0\n    for d1, d2 in zip(str_num1, str_num2):\n        distance += abs(int(d1) - int(d2))\n    \n    return distance"
    ],
    "Write a function to find the largest sum of contiguous subarray in the given array.": [
        "def max_subarray_sum(arr):\n    max_current = arr[0]\n    max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"
    ],
    "Write a function to find the union of elements of the given tuples.": [
        "def tuple_union(tup1, tup2):\n    return tuple(set(tup1) | set(tup2))\n\n# Example usage:\n# result = tuple_union((1, 2, 3), (3, 4, 5))\n# print(result)  # Output: (1, 2, 3, 4, 5)"
    ],
    "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.": [
        "def assign_pairs(elements):\n    paired_elements = {}\n    for i in range(0, len(elements), 2):\n        paired_elements[elements[i]] = elements[i+1]\n        paired_elements[elements[i+1]] = elements[i]\n    return paired_elements\n\n# Example usage:\nelements = ('a', 'b', 'c', 'd', 'e', 'f')\nresult = assign_pairs(elements)\nprint(result)"
    ],
    "Write a python function to find the maximum length of sublist.": [
        "def max_length_of_sublist(lists):\n    return max(len(sublist) for sublist in lists)"
    ],
    "Write a function to extract values between quotation marks of a string.": [
        "def extract_quoted_values(s):\n    import re\n    return re.findall(r'\"(.*?)\"', s)"
    ],
    "Write a python function to count unequal element pairs from the given array.": [
        "def count_unequal_pairs(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Example usage:\n# arr = [1, 2, 3, 2]\n# print(count_unequal_pairs(arr))  # Output: 5"
    ],
    "Write a python function to split a string into characters.": [
        "def split_string_into_characters(s):\n    return list(s)"
    ],
    "Write a function to get the sum of a non-negative integer.": [
        "def sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)"
    ],
    "Write a function to check whether a specified list is sorted or not.": [
        "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"
    ],
    "Write a function to create a list of empty dictionaries.": [
        "def create_empty_dict_list(size):\n    return [{} for _ in range(size)]"
    ],
    "Write a function to sort each sublist of strings in a given list of lists.": [
        "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]"
    ],
    "Write a function to remove words from a given list of strings containing a character or string.": [
        "def remove_words_with_char(words, char):\n    return [word for word in words if char not in word]"
    ],
    "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.": [
        "def max_sum_of_disjoint_pairs(arr, k):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Sort the array to consider largest elements first\n    arr.sort(reverse=True)\n    \n    max_sum = 0\n    selected_indices = set()\n    \n    for i in range(n):\n        if i in selected_indices:\n            continue\n        \n        # Find the farthest index within distance k that forms a pair with arr[i]\n        j = min(i + k, n - 1)\n        while j > i and (j in selected_indices or j - i > k):\n            j -= 1\n        \n        if j > i:\n            max_sum += arr[i] + arr[j]\n            selected_indices.add(i)\n            selected_indices.add(j)\n    \n    return max_sum"
    ],
    "Write a python function to remove two duplicate numbers from a given number of lists.": [
        "def remove_duplicate_numbers(lists):\n    result = []\n    for num_list in lists:\n        unique_numbers = list(set(num_list))\n        if len(unique_numbers) == len(num_list) - 2:\n            result.append(unique_numbers)\n    return result\n\n# Example usage:\nlists = [[1, 2, 2, 3, 4], [5, 5, 6, 7, 8], [9, 10, 10, 11, 11]]\nprint(remove_duplicate_numbers(lists))"
    ],
    "Write a python function to calculate the product of the unique numbers of a given list.": [
        "def product_of_unique_numbers(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    ],
    "Write a function to find the surface area of a cylinder.": [
        "import math\n\ndef surface_area_of_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)"
    ],
    "Write a python function to find nth number in a sequence which is not a multiple of a given number.": [
        "def find_nth_non_multiple(n, k):\n    count = 0\n    num = 1\n    while count < n:\n        if num % k != 0:\n            count += 1\n        if count == n:\n            return num\n        num += 1"
    ],
    "Write a python function to check whether an array is subarray of another or not.": [
        "def is_subarray(arr1, arr2):\n    if len(arr1) > len(arr2):\n        return False\n    \n    for i in range(len(arr2) - len(arr1) + 1):\n        if arr2[i:i+len(arr1)] == arr1:\n            return True\n    \n    return False\n\n# Example usage:\n# arr1 = [3, 5]\n# arr2 = [2, 8, 6, 3, 5, 4, 9]\n# print(is_subarray(arr1, arr2))  # Output: True"
    ],
    "Write a python function to find the last digit in factorial of a given number.": [
        "def last_digit_of_factorial(n):\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Example usage:\n# print(last_digit_of_factorial(5))  # Output: 0\n# print(last_digit_of_factorial(4))  # Output: 4"
    ],
    "Write a function to interleave lists of the same length.": [
        "def interleave_lists(list1, list2):\n    return [item for pair in zip(list1, list2) for item in pair]"
    ],
    "Write a function to find the dissimilar elements in the given two tuples.": [
        "def find_dissimilar_elements(tuple1, tuple2):\n    return tuple(set(tuple1) ^ set(tuple2))"
    ],
    "Write a function to extract the even elements in the nested mixed tuple.": [
        "def extract_even_elements(nested_tuple):\n    def extract_evens(t):\n        evens = []\n        for element in t:\n            if isinstance(element, tuple):\n                evens.extend(extract_evens(element))\n            elif isinstance(element, int) and element % 2 == 0:\n                evens.append(element)\n        return evens\n\n    return extract_evens(nested_tuple)\n\n# Example usage:\nnested_tuple = ((1, 2, 3), (4, (5, 6), 7), 8, (9, 10))\nprint(extract_even_elements(nested_tuple))\n\nThis function recursively traverses through the nested tuple and extracts even integers into a list."
    ],
    "Write a python function to find the surface area of the square pyramid.": [
        "def surface_area_of_square_pyramid(base_length, slant_height):\n    return 2 * base_length * slant_height + base_length ** 2"
    ],
    "Write a function to check if a dictionary is empty or not.": [
        "def is_dict_empty(d):\n    return len(d) == 0"
    ],
    "Write a function for nth catalan number.": [
        "def catalan(n):\n    if n <= 1:\n        return 1\n    res_num = 0\n    for i in range(n):\n        res_num += catalan(i) * catalan(n-i-1)\n    return res_num"
    ],
    "Write a function to find all adverbs and their positions in a given sentence by using regex.": [
        "import re\n\ndef find_adverbs_and_positions(sentence):\n    adverbs = []\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, sentence)\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n    return adverbs"
    ],
    "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.": [
        "import heapq\n\ndef find_n_expensive_prices(prices, n):\n    return heapq.nlargest(n, prices)"
    ],
    "Write a python function to split the array and add the first part to the end.": [
        "def rotate_array(arr, n):\n    return arr[n:] + arr[:n]"
    ],
    "Write a function to convert a list to a tuple.": [
        "def list_to_tuple(lst):\n    return tuple(lst)"
    ],
    "Write a python function to find the difference between largest and smallest value in a given array.": [
        "def diff_max_min(arr):\n    if not arr:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val"
    ],
    "Write a function to find perfect squares between two given numbers.": [
        "import math\n\ndef find_perfect_squares(start, end):\n    perfect_squares = []\n    for num in range(start, end + 1):\n        if math.isqrt(num) ** 2 == num:\n            perfect_squares.append(num)\n    return perfect_squares"
    ],
    "Write a function to convert polar coordinates to rectangular coordinates.": [
        "import cmath\n\ndef polar_to_rectangular(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.real)\n\n# Example usage:\n# r = 5\n# theta = cmath.pi / 4  # 45 degrees in radians\n# print(polar_to_rectangular(r, theta))"
    ],
    "Write a python function to interchange the first and last elements in a list.": [
        "def interchange_first_last(lst):\n    if len(lst) < 2:\n        return lst\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    ],
    "Write a python function to find sum of product of binomial co-efficients.": [
        "from math import comb\n\ndef sum_of_product_of_binomial_coeffs(n):\n    total_sum = 0\n    for k in range(n + 1):\n        total_sum += comb(n, k) * comb(n, k)\n    return total_sum"
    ],
    "Write a function to remove leading zeroes from an ip address.": [
        "def remove_leading_zeroes(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))"
    ],
    "Write a function to find the difference of first even and odd number of a given list.": [
        "def difference_first_even_odd(numbers):\n    even_number = None\n    odd_number = None\n    \n    for num in numbers:\n        if even_number is None and num % 2 == 0:\n            even_number = num\n        if odd_number is None and num % 2 != 0:\n            odd_number = num\n        if even_number is not None and odd_number is not None:\n            break\n    \n    if even_number is not None and odd_number is not None:\n        return even_number - odd_number\n    else:\n        return None\n\n# Example usage:\nnumbers = [5, 3, 8, 7, 2]\nresult = difference_first_even_odd(numbers)\nprint(result)  # Output: 1"
    ],
    "Write a python function to count minimum number of swaps required to convert one binary string to another.": [
        "def min_swaps(str1, str2):\n    n = len(str1)\n    if n != len(str2):\n        return -1\n    \n    mismatches = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            mismatches += 1\n    \n    if mismatches % 2 != 0:\n        return -1\n    \n    swaps = mismatches // 2\n    return swaps"
    ],
    "Write a function to find the size of the given tuple.": [
        "def tuple_size(t):\n    return len(t)"
    ],
    "Write a function to find kth element from the given two sorted arrays.": [
        "def find_kth_element(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n    i, j = 0, 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            if i + j == k - 1:\n                return arr1[i]\n            i += 1\n        else:\n            if i + j == k - 1:\n                return arr2[j]\n            j += 1\n    \n    while i < m:\n        if i + j == k - 1:\n            return arr1[i]\n        i += 1\n    \n    while j < n:\n        if i + j == k - 1:\n            return arr2[j]\n        j += 1"
    ],
    "Write a function to check whether the given number is armstrong or not.": [
        "def is_armstrong(number):\n    digits = [int(d) for d in str(number)]\n    num_digits = len(digits)\n    sum_of_powers = sum(d ** num_digits for d in digits)\n    return sum_of_powers == number\n\n# Example usage:\n# print(is_armstrong(153))  # Output: True\n# print(is_armstrong(123))  # Output: False"
    ],
    "Write a function to find sum and average of first n natural numbers.": [
        "def sum_and_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average\n\n# Example usage:\nn = 5\ntotal_sum, average = sum_and_average(n)\nprint(f\"Sum: {total_sum}, Average: {average}\")"
    ],
    "Write a python function to check whether the given number is even or not using bitwise operator.": [
        "def is_even(n):\n    return (n & 1) == 0"
    ],
    "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].": [
        "def minCost(cost):\n    m = len(cost)\n    n = len(cost[0])\n    \n    # Create a 2D table to store results of subproblems\n    dp = [[0 for x in range(n)] for x in range(m)]\n    \n    # Fill the table using dynamic programming approach\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[m-1][n-1]"
    ],
    "Write a function to find the similar elements from the given two tuple lists.": [
        "def find_similar_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    similar_elements = set1.intersection(set2)\n    return list(similar_elements)\n\n# Example usage:\nlist1 = (1, 2, 3, 4, 5)\nlist2 = (4, 5, 6, 7, 8)\nprint(find_similar_elements(list1, list2))"
    ],
    "Write a python function to identify non-prime numbers.": [
        "def identify_non_primes(numbers):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    non_primes = [num for num in numbers if not is_prime(num)]\n    return non_primes"
    ],
    "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.": [
        "import heapq\n\ndef find_largest_numbers(nums, n):\n    return heapq.nlargest(n, nums)"
    ],
    "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.": [
        "def countWays(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    a, b = 1, 1\n    for i in range(2, n + 1):\n        a, b = b, (a + 2 * b) % 1000000007\n    return b\n\n# Example usage:\nn = 4\nprint(countWays(n))  # Output: 5"
    ],
    "Write a python function to check whether the two numbers differ at one bit position only or not.": [
        "def differ_by_one_bit(x, y):\n    xor_result = x ^ y\n    return xor_result & (xor_result + 1) == 0"
    ],
    "Write a function to find all words which are at least 4 characters long in a string by using regex.": [
        "import re\n\ndef find_long_words(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)"
    ],
    "Write a function to find squares of individual elements in a list using lambda function.": [
        "def square_elements(lst):\n    return list(map(lambda x: x**2, lst))"
    ],
    "Write a python function to find the minimum number of rotations required to get the same string.": [
        "def min_rotations_to_same_string(s):\n    n = len(s)\n    temp = s + s\n    for i in range(1, n + 1):\n        substring = temp[i:i + n]\n        if substring == s:\n            return i\n    return n"
    ],
    "Write a function to get the n smallest items from a dataset.": [
        "def get_n_smallest_items(data, n):\n    return sorted(data)[:n]"
    ]
}